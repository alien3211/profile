!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
_INDIRECT_ARRAY_H	/home/alan/.vim/tags/cpp_src/indirect_array.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^namespace std {$/;"	n
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    class indirect_array$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      typedef _Tp value_type;$/;"	t	class:std::indirect_array	access:public
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      indirect_array(const indirect_array&);$/;"	p	class:std::indirect_array	access:public	signature:(const indirect_array&)
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      indirect_array& operator=(const indirect_array&);$/;"	p	class:std::indirect_array	access:public	signature:(const indirect_array&)
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const valarray<_Tp>&) const
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator= (const _Tp&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Tp&) const
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::indirect_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      indirect_array(_Array<_Tp>, size_t, _Array<size_t>);$/;"	p	class:std::indirect_array	access:private	signature:(_Array<_Tp>, size_t, _Array<size_t>)
_M_sz	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      const size_t	 _M_sz;$/;"	m	class:std::indirect_array	access:private
_M_index	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      const _Array<size_t> _M_index;$/;"	m	class:std::indirect_array	access:private
_M_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      const _Array<_Tp>	 _M_array;$/;"	m	class:std::indirect_array	access:private
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      indirect_array();$/;"	p	class:std::indirect_array	access:private	signature:()
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)$/;"	f	class:std::indirect_array	signature:(const indirect_array<_Tp>& __a)
indirect_array	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    indirect_array<_Tp>::indirect_array(_Array<_Tp> __a, size_t __s,$/;"	f	class:std::indirect_array	signature:(_Array<_Tp> __a, size_t __s, _Array<size_t> __i)
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    indirect_array<_Tp>::operator=(const indirect_array<_Tp>& __a)$/;"	f	class:std::indirect_array	signature:(const indirect_array<_Tp>& __a)
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    indirect_array<_Tp>::operator=(const _Tp& __t) const$/;"	f	class:std::indirect_array	signature:(const _Tp& __t) const
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^    indirect_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	f	class:std::indirect_array	signature:(const valarray<_Tp>& __v) const
operator =	/home/alan/.vim/tags/cpp_src/indirect_array.h	/^      indirect_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	f	class:std::indirect_array	signature:(const _Expr<_Dom, _Tp>& __e) const
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/indirect_array.h	176;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/indirect_array.h	177;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/indirect_array.h	204;"	d
_STL_CONSTRUCT_H	/home/alan/.vim/tags/cpp_src/stl_construct.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^namespace std {$/;"	n
_Construct	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
_Construct	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Construct(_T1* __p)$/;"	f	namespace:std	signature:(_T1* __p)
_Destroy	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	signature:(_Tp* __pointer)
__destroy_aux	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
__destroy_aux	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)$/;"	f	namespace:std	signature:(_ForwardIterator, _ForwardIterator, __true_type)
_Destroy	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Destroy	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)
_Destroy	/home/alan/.vim/tags/cpp_src/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>)
_LOCALE_FACETS_H	/home/alan/.vim/tags/cpp_src/locale_facets.h	41;"	d
std	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^namespace std {$/;"	n
_GLIBCXX_NUM_FACETS	/home/alan/.vim/tags/cpp_src/locale_facets.h	57;"	d
__convert_to_v	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,$/;"	p	namespace:std	signature:(const char* __in, _Tv& __out, ios_base::iostate& __err, const __c_locale& __cloc)
__convert_to_v	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	signature:(const char*, float&, ios_base::iostate&, const __c_locale&)
__convert_to_v	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	signature:(const char*, double&, ios_base::iostate&, const __c_locale&)
__convert_to_v	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	signature:(const char*, long double&, ios_base::iostate&, const __c_locale&)
__pad	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct __pad$/;"	s	namespace:std
_S_pad	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	access:public	signature:(ios_base& __io, _CharT __fill, _CharT* __news, const _CharT* __olds, const streamsize __newlen, const streamsize __oldlen, const bool __num)
__add_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	signature:(_CharT* __s, _CharT __sep, const char* __gbeg, size_t __gsize, const _CharT* __first, const _CharT* __last)
__write	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	signature:(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
__write	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	signature:(_OutIter __s, const _CharT* __ws, int __len)
__ctype_abstract_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	access:public
is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(mask __m, char_type __c) const
is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(const char_type *__lo, const char_type *__hi, mask *__vec) const
scan_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
scan_not	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char_type __c) const
toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char_type *__lo, const char_type* __hi) const
tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char_type __c) const
tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char_type* __lo, const char_type* __hi) const
widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char __c) const
widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(const char* __lo, const char* __hi, char_type* __to) const
narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(char_type __c, char __dfault) const
narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base	access:public	signature:(const char_type* __lo, const char_type* __hi, char __dfault, char *__to) const
__ctype_abstract_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs = 0)
~__ctype_abstract_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:()
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(mask __m, char_type __c) const
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(const char_type* __lo, const char_type* __hi, mask* __vec) const
do_scan_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_scan_not	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char_type) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char_type) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(char) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi,$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(const char* __lo, const char* __hi, char_type* __dest) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(char_type, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(char_type, char __dfault) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	access:protected	signature:(const char_type* __lo, const char_type* __hi, char __dfault, char* __dest) const
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	inherits:__ctype_abstract_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::ctype	access:public
mask	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::ctype	access:public
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype	access:public	signature:(size_t __refs = 0)
~ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	access:protected	signature:(mask __m, char_type __c) const
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	access:protected	signature:(const char_type* __lo, const char_type* __hi, mask* __vec) const
do_scan_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_scan_not	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type __c) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type __c) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	access:protected	signature:(char __c) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	access:protected	signature:(const char* __lo, const char* __hi, char_type* __dest) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type, char __dfault) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	access:protected	signature:(const char_type* __lo, const char_type* __hi, char __dfault, char* __dest) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef char		char_type;$/;"	t	class:std::ctype	access:public
_M_c_locale_ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	access:protected
_M_del	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool			_M_del;$/;"	m	class:std::ctype	access:protected
_M_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __to_type			_M_toupper;$/;"	m	class:std::ctype	access:protected
_M_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __to_type			_M_tolower;$/;"	m	class:std::ctype	access:protected
_M_table	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const mask*		_M_table;$/;"	m	class:std::ctype	access:protected
_M_widen_ok	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	m	class:std::ctype	access:protected
_M_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	access:protected
_M_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	access:protected
_M_narrow_ok	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	m	class:std::ctype	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id        id;$/;"	m	class:std::ctype	access:public
table_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	access:public
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(const mask* __table = 0, bool __del = false, size_t __refs = 0)
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc, const mask* __table = 0, bool __del = false, size_t __refs = 0)
is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	access:public	signature:(mask __m, char __c) const
is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	access:public	signature:(const char* __lo, const char* __hi, mask* __vec) const
scan_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	access:public	signature:(mask __m, const char* __lo, const char* __hi) const
scan_not	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	access:public	signature:(mask __m, const char* __lo, const char* __hi) const
toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::ctype	access:public	signature:(char_type __c) const
toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype	access:public	signature:(char_type *__lo, const char_type* __hi) const
tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::ctype	access:public	signature:(char_type __c) const
tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype	access:public	signature:(char_type* __lo, const char_type* __hi) const
widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::ctype	access:public	signature:(char __c) const
widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	access:public	signature:(const char* __lo, const char* __hi, char_type* __to) const
narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype	access:public	signature:(char_type __c, char __dfault) const
narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	access:public	signature:(const char_type* __lo, const char_type* __hi, char __dfault, char *__to) const
table	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      table() const throw()$/;"	f	class:std::ctype	access:protected	signature:() const
classic_table	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      classic_table() throw();$/;"	p	class:std::ctype	access:protected	signature:()
~ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(char __c) const$/;"	f	class:std::ctype	access:protected	signature:(char __c) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const$/;"	f	class:std::ctype	access:protected	signature:(const char* __lo, const char* __hi, char_type* __dest) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(char_type __c, char) const$/;"	f	class:std::ctype	access:protected	signature:(char_type __c, char) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	access:protected	signature:(const char_type* __lo, const char_type* __hi, char, char* __dest) const
_M_widen_init	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      void _M_widen_init() const$/;"	f	class:std::ctype	access:private	signature:() const
_M_narrow_init	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      void _M_narrow_init() const$/;"	f	class:std::ctype	access:private	signature:() const
use_facet	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    use_facet<ctype<char> >(const locale& __loc);$/;"	p	namespace:std	signature:(const locale& __loc)
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	inherits:__ctype_abstract_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef wchar_t		char_type;$/;"	t	class:std::ctype	access:public
__wmask_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	t	class:std::ctype	access:public
_M_c_locale_ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	access:protected
_M_narrow_ok	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	m	class:std::ctype	access:protected
_M_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      char                      _M_narrow[128];$/;"	m	class:std::ctype	access:protected
_M_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	access:protected
_M_bit	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      mask                      _M_bit[16];$/;"	m	class:std::ctype	access:protected
_M_wmask	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	m	class:std::ctype	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::ctype	access:public
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(size_t __refs = 0)
ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
_M_convert_to_wmask	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const;$/;"	p	class:std::ctype	access:protected	signature:(const mask __m) const
~ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	access:protected	signature:(mask __m, char_type __c) const
do_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	access:protected	signature:(const char_type* __lo, const char_type* __hi, mask* __vec) const
do_scan_is	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_scan_not	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	access:protected	signature:(mask __m, const char_type* __lo, const char_type* __hi) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type) const
do_toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type) const
do_tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type* __lo, const char_type* __hi) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(char) const;$/;"	p	class:std::ctype	access:protected	signature:(char) const
do_widen	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	access:protected	signature:(const char* __lo, const char* __hi, char_type* __dest) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	access:protected	signature:(char_type, char __dfault) const
do_narrow	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	access:protected	signature:(const char_type* __lo, const char_type* __hi, char __dfault, char* __dest) const
_M_initialize_ctype	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_initialize_ctype();$/;"	p	class:std::ctype	access:protected	signature:()
use_facet	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    use_facet<ctype<wchar_t> >(const locale& __loc);$/;"	p	namespace:std	signature:(const locale& __loc)
ctype_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	inherits:ctype
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::ctype_byname	access:public
ctype_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~ctype_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~ctype_byname() { };$/;"	f	class:std::ctype_byname	access:protected	signature:()
ctype_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    ctype_byname<char>::ctype_byname(const char*, size_t refs);$/;"	p	class:std::ctype_byname	signature:(const char*, size_t refs)
ctype_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);$/;"	p	class:std::ctype_byname	signature:(const char*, size_t refs)
std	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^namespace std {$/;"	n
__num_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^  class __num_base$/;"	c	namespace:std
_S_ominus	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_ominus,$/;"	e	enum:std::__num_base::__anon1
_S_oplus	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oplus,$/;"	e	enum:std::__num_base::__anon1
_S_ox	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_ox,$/;"	e	enum:std::__num_base::__anon1
_S_oX	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oX,$/;"	e	enum:std::__num_base::__anon1
_S_odigits	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_odigits,$/;"	e	enum:std::__num_base::__anon1
_S_odigits_end	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon1
_S_oudigits	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon1
_S_oudigits_end	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon1
_S_oe	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	e	enum:std::__num_base::__anon1
_S_oE	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	e	enum:std::__num_base::__anon1
_S_oend	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon1
_S_atoms_out	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	access:public
_S_atoms_in	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	access:public
_S_iminus	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon2
_S_iplus	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon2
_S_ix	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon2
_S_iX	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon2
_S_izero	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon2
_S_ie	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon2
_S_iE	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon2
_S_iend	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon2
_S_format_float	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod);$/;"	p	class:std::__num_base	access:public	signature:(const ios_base& __io, char* __fptr, char __mod)
__numpunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
_M_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__numpunct_cache	access:public
_M_grouping_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	access:public
_M_use_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__numpunct_cache	access:public
_M_truename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_truename;$/;"	m	struct:std::__numpunct_cache	access:public
_M_truename_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_truename_size;$/;"	m	struct:std::__numpunct_cache	access:public
_M_falsename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	m	struct:std::__numpunct_cache	access:public
_M_falsename_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	access:public
_M_decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__numpunct_cache	access:public
_M_thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	access:public
_M_atoms_out	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	access:public
_M_atoms_in	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	access:public
_M_allocated	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__numpunct_cache	access:public
__numpunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __numpunct_cache(size_t __refs = 0) : facet(__refs),$/;"	f	struct:std::__numpunct_cache	access:public	signature:(size_t __refs = 0)
~__numpunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	access:public	signature:()
_M_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	access:public	signature:(const locale& __loc)
operator =	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache&)
__numpunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache&)
~__numpunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache	signature:()
numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class numpunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct	access:public
__cache_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	t	class:std::numpunct	access:public
_M_data	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::numpunct	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::numpunct	access:public
numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      numpunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	f	class:std::numpunct	access:public	signature:(size_t __refs = 0)
numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__cache_type* __cache, size_t __refs = 0)
numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::numpunct	access:public	signature:() const
thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::numpunct	access:public	signature:() const
grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      grouping() const$/;"	f	class:std::numpunct	access:public	signature:() const
truename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      truename() const$/;"	f	class:std::numpunct	access:public	signature:() const
falsename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      falsename() const$/;"	f	class:std::numpunct	access:public	signature:() const
~numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~numpunct();$/;"	p	class:std::numpunct	access:protected	signature:()
do_decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::numpunct	access:protected	signature:() const
do_thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::numpunct	access:protected	signature:() const
do_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::numpunct	access:protected	signature:() const
do_truename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_truename() const$/;"	f	class:std::numpunct	access:protected	signature:() const
do_falsename	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_falsename() const$/;"	f	class:std::numpunct	access:protected	signature:() const
_M_initialize_numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = NULL);$/;"	p	class:std::numpunct	access:protected	signature:(__c_locale __cloc = NULL)
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct
~numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	signature:()
_M_initialize_numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	signature:(__c_locale __cloc)
~numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	signature:()
_M_initialize_numpunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	signature:(__c_locale __cloc)
numpunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	inherits:numpunct
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct_byname	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct_byname	access:public
numpunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~numpunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname	access:protected	signature:()
num_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class num_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::num_get	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::num_get	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::num_get	access:public
num_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get	access:public	signature:(size_t __refs = 0)
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, bool& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned short& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned int& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned long& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long long& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned long long& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, float& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, double& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long double& __v) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	access:public	signature:(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, void*& __v) const
~num_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      virtual ~num_get() { }$/;"	f	class:std::num_get	access:protected	signature:()
_M_extract_float	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate&, string& __xtrc) const
_M_extract_int	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate&, _ValueT& __v) const
_M_find	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	access:protected	signature:(const _CharT2*, size_t __len, _CharT2 __c) const
_M_find	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	access:protected	signature:(const _CharT2* __zero, size_t __len, _CharT2 __c) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const;$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, unsigned short&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, unsigned int&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, unsigned long&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, long long&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, unsigned long long&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, float&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, double&) const
__do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, double&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, long double&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, void*&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	p	class:std::num_get	access:protected	signature:(iter_type, iter_type, ios_base&, ios_base::iostate& __err, long double&) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get
num_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class num_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::num_put	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	t	class:std::num_put	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::num_put	access:public
num_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put	access:public	signature:(size_t __refs = 0)
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, long __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, unsigned long __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, unsigned long long __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, double __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, long double __v) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	f	class:std::num_put	access:public	signature:(iter_type __s, ios_base& __f, char_type __fill, const void* __v) const
_M_insert_float	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base& __io, char_type __fill, char __mod, _ValueT __v) const
_M_group_float	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	access:protected	signature:(const char* __grouping, size_t __grouping_size, char_type __sep, const char_type* __p, char_type* __new, char_type* __cs, int& __len) const
_M_insert_int	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base& __io, char_type __fill, _ValueT __v) const
_M_group_int	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	access:protected	signature:(const char* __grouping, size_t __grouping_size, char_type __sep, ios_base& __io, char_type* __new, char_type* __cs, int& __len) const
_M_pad	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	access:protected	signature:(char_type __fill, streamsize __w, ios_base& __io, char_type* __new, const char_type* __cs, int& __len) const
~num_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~num_put() { };$/;"	f	class:std::num_put	access:protected	signature:()
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, bool __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, long __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, unsigned long) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long long __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, long long __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, unsigned long long) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, double __v) const
__do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, double __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, long double __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, const void* __v) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;$/;"	p	class:std::num_put	access:protected	signature:(iter_type, ios_base&, char_type __fill, long double __v) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put
collate	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class collate : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::collate	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::collate	access:public
_M_c_locale_collate	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __c_locale			_M_c_locale_collate;$/;"	m	class:std::collate	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::collate	access:public
collate	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(size_t __refs = 0)
collate	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
compare	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate	access:public	signature:(const _CharT* __lo1, const _CharT* __hi1, const _CharT* __lo2, const _CharT* __hi2) const
transform	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	access:public	signature:(const _CharT* __lo, const _CharT* __hi) const
hash	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	access:public	signature:(const _CharT* __lo, const _CharT* __hi) const
_M_compare	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_compare(const _CharT*, const _CharT*) const;$/;"	p	class:std::collate	access:public	signature:(const _CharT*, const _CharT*) const
_M_transform	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const;$/;"	p	class:std::collate	access:public	signature:(_CharT*, const _CharT*, size_t) const
~collate	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~collate()$/;"	f	class:std::collate	access:protected	signature:()
do_compare	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	access:protected	signature:(const _CharT* __lo1, const _CharT* __hi1, const _CharT* __lo2, const _CharT* __hi2) const
do_transform	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	access:protected	signature:(const _CharT* __lo, const _CharT* __hi) const
do_hash	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	access:protected	signature:(const _CharT* __lo, const _CharT* __hi) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate
_M_compare	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    collate<char>::_M_compare(const char*, const char*) const;$/;"	p	class:std::collate	signature:(const char*, const char*) const
_M_transform	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const;$/;"	p	class:std::collate	signature:(char*, const char*, size_t) const
_M_compare	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;$/;"	p	class:std::collate	signature:(const wchar_t*, const wchar_t*) const
_M_transform	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;$/;"	p	class:std::collate	signature:(wchar_t*, const wchar_t*, size_t) const
collate_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class collate_byname : public collate<_CharT>$/;"	c	namespace:std	inherits:collate
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT               char_type;$/;"	t	class:std::collate_byname	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	access:public
collate_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~collate_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname	access:protected	signature:()
time_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^  class time_base$/;"	c	namespace:std
dateorder	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	g	class:std::time_base	access:public
no_order	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	e	enum:std::time_base::dateorder
dmy	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	e	enum:std::time_base::dateorder
mdy	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	e	enum:std::time_base::dateorder
ymd	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	e	enum:std::time_base::dateorder
ydm	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	e	enum:std::time_base::dateorder
__timepunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct __timepunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
_S_timezones	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static const _CharT*		_S_timezones[14];$/;"	m	struct:std::__timepunct_cache	access:public
_M_date_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_date_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_date_era_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_date_era_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_time_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_time_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_time_era_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_time_era_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_date_time_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_date_time_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_date_time_era_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_date_time_era_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_am	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_am;$/;"	m	struct:std::__timepunct_cache	access:public
_M_pm	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_pm;$/;"	m	struct:std::__timepunct_cache	access:public
_M_am_pm_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_am_pm_format;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day1	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day1;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day2	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day2;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day3	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day3;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day4	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day4;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day5	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day5;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day6	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day6;$/;"	m	struct:std::__timepunct_cache	access:public
_M_day7	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_day7;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday1	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday1;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday2	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday2;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday3	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday3;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday4	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday4;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday5	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday5;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday6	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday6;$/;"	m	struct:std::__timepunct_cache	access:public
_M_aday7	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_aday7;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month01	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month01;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month02	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month02;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month03	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month03;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month04	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month04;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month05	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month05;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month06	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month06;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month07	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month07;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month08	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month08;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month09	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month09;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month10	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month10;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month11	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month11;$/;"	m	struct:std::__timepunct_cache	access:public
_M_month12	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_month12;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth01	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth01;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth02	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth02;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth03	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth03;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth04	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth04;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth05	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth05;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth06	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth06;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth07	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth07;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth08	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth08;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth09	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth09;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth10	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth10;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth11	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth11;$/;"	m	struct:std::__timepunct_cache	access:public
_M_amonth12	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_amonth12;$/;"	m	struct:std::__timepunct_cache	access:public
_M_allocated	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__timepunct_cache	access:public
__timepunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __timepunct_cache(size_t __refs = 0) : facet(__refs),$/;"	f	struct:std::__timepunct_cache	access:public	signature:(size_t __refs = 0)
~__timepunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~__timepunct_cache();$/;"	p	struct:std::__timepunct_cache	access:public	signature:()
_M_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__timepunct_cache	access:public	signature:(const locale& __loc)
operator =	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      operator=(const __timepunct_cache&);$/;"	p	struct:std::__timepunct_cache	access:private	signature:(const __timepunct_cache&)
__timepunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __timepunct_cache(const __timepunct_cache&);$/;"	p	struct:std::__timepunct_cache	access:private	signature:(const __timepunct_cache&)
~__timepunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct_cache<_CharT>::~__timepunct_cache()$/;"	f	class:std::__timepunct_cache	signature:()
_S_timezones	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct_cache<char>::_S_timezones[14];$/;"	m	class:std::__timepunct_cache
_S_timezones	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct_cache<wchar_t>::_S_timezones[14];$/;"	m	class:std::__timepunct_cache
_S_timezones	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];$/;"	m	class:std::__timepunct_cache
__timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class __timepunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
__char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			__char_type;$/;"	t	class:std::__timepunct	access:public
__string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	t	class:std::__timepunct	access:public
__cache_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef __timepunct_cache<_CharT>	__cache_type;$/;"	t	class:std::__timepunct	access:public
_M_data	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::__timepunct	access:protected
_M_c_locale_timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __c_locale			_M_c_locale_timepunct;$/;"	m	class:std::__timepunct	access:protected
_M_name_timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const char*			_M_name_timepunct;$/;"	m	class:std::__timepunct	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::__timepunct	access:public
__timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __timepunct(size_t __refs = 0);$/;"	p	class:std::__timepunct	access:public	signature:(size_t __refs = 0)
__timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __timepunct(__cache_type* __cache, size_t __refs = 0);$/;"	p	class:std::__timepunct	access:public	signature:(__cache_type* __cache, size_t __refs = 0)
__timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	p	class:std::__timepunct	access:public	signature:(__c_locale __cloc, const char* __s, size_t __refs = 0)
_M_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,$/;"	p	class:std::__timepunct	access:public	signature:(_CharT* __s, size_t __maxlen, const _CharT* __format, const tm* __tm) const
_M_date_formats	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_date_formats(const _CharT** __date) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __date) const
_M_time_formats	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_time_formats(const _CharT** __time) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __time) const
_M_date_time_formats	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_date_time_formats(const _CharT** __dt) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __dt) const
_M_am_pm_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_am_pm_format(const _CharT* __ampm) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT* __ampm) const
_M_am_pm	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_am_pm(const _CharT** __ampm) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __ampm) const
_M_days	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_days(const _CharT** __days) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __days) const
_M_days_abbreviated	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_days_abbreviated(const _CharT** __days) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __days) const
_M_months	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_months(const _CharT** __months) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __months) const
_M_months_abbreviated	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_months_abbreviated(const _CharT** __months) const$/;"	f	class:std::__timepunct	access:public	signature:(const _CharT** __months) const
~__timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~__timepunct();$/;"	p	class:std::__timepunct	access:protected	signature:()
_M_initialize_timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_initialize_timepunct(__c_locale __cloc = NULL);$/;"	p	class:std::__timepunct	access:protected	signature:(__c_locale __cloc = NULL)
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id __timepunct<_CharT>::id;$/;"	m	class:std::__timepunct
_M_initialize_timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);$/;"	p	class:std::__timepunct	signature:(__c_locale __cloc)
_M_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;$/;"	p	class:std::__timepunct	signature:(char*, size_t, const char*, const tm*) const
_M_initialize_timepunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);$/;"	p	class:std::__timepunct	signature:(__c_locale __cloc)
_M_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,$/;"	p	class:std::__timepunct	signature:(wchar_t*, size_t, const wchar_t*, const tm*) const
std	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^namespace std {$/;"	n
time_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class time_get : public locale::facet, public time_base$/;"	c	namespace:std	inherits:locale::facet,time_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::time_get	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::time_get	access:public
__string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	t	class:std::time_get	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::time_get	access:public
time_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      time_get(size_t __refs = 0)$/;"	f	class:std::time_get	access:public	signature:(size_t __refs = 0)
date_order	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      date_order()  const$/;"	f	class:std::time_get	access:public	signature:() const
get_time	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::time_get	access:public	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
get_date	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::time_get	access:public	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
get_weekday	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::time_get	access:public	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
get_monthname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::time_get	access:public	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
get_year	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::time_get	access:public	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
~time_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~time_get() { }$/;"	f	class:std::time_get	access:protected	signature:()
do_date_order	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_date_order() const;$/;"	p	class:std::time_get	access:protected	signature:() const
do_get_time	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
do_get_date	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
do_get_weekday	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base&, ios_base::iostate& __err, tm* __tm) const
do_get_monthname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base&, ios_base::iostate& __err, tm* __tm) const
do_get_year	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm) const
_M_extract_num	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_extract_num(iter_type __beg, iter_type __end, int& __member,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, int& __member, int __min, int __max, size_t __len, ios_base& __io, ios_base::iostate& __err) const
_M_extract_name	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_extract_name(iter_type __beg, iter_type __end, int& __member,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, int& __member, const _CharT** __names, size_t __indexlen, ios_base& __io, ios_base::iostate& __err) const
_M_extract_via_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,$/;"	p	class:std::time_get	access:protected	signature:(iter_type __beg, iter_type __end, ios_base& __io, ios_base::iostate& __err, tm* __tm, const _CharT* __format) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id time_get<_CharT, _InIter>::id;$/;"	m	class:std::time_get
time_get_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class time_get_byname : public time_get<_CharT, _InIter>$/;"	c	namespace:std	inherits:time_get
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::time_get_byname	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::time_get_byname	access:public
time_get_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      time_get_byname(const char*, size_t __refs = 0)$/;"	f	class:std::time_get_byname	access:public	signature:(const char*, size_t __refs = 0)
~time_get_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~time_get_byname() { }$/;"	f	class:std::time_get_byname	access:protected	signature:()
time_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class time_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::time_put	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	t	class:std::time_put	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::time_put	access:public
time_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      time_put(size_t __refs = 0)$/;"	f	class:std::time_put	access:public	signature:(size_t __refs = 0)
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	p	class:std::time_put	access:public	signature:(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm, const _CharT* __beg, const _CharT* __end) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::time_put	access:public	signature:(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm, char __format, char __mod = 0) const
~time_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~time_put()$/;"	f	class:std::time_put	access:protected	signature:()
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	p	class:std::time_put	access:protected	signature:(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm, char __format, char __mod) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id time_put<_CharT, _OutIter>::id;$/;"	m	class:std::time_put
time_put_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class time_put_byname : public time_put<_CharT, _OutIter>$/;"	c	namespace:std	inherits:time_put
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::time_put_byname	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	t	class:std::time_put_byname	access:public
time_put_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      time_put_byname(const char*, size_t __refs = 0)$/;"	f	class:std::time_put_byname	access:public	signature:(const char*, size_t __refs = 0)
~time_put_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~time_put_byname() { }$/;"	f	class:std::time_put_byname	access:protected	signature:()
money_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^  class money_base$/;"	c	namespace:std
part	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	g	class:std::money_base	access:public
none	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	e	enum:std::money_base::part
space	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	e	enum:std::money_base::part
symbol	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	e	enum:std::money_base::part
sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	e	enum:std::money_base::part
value	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	e	enum:std::money_base::part
pattern	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct pattern { char field[4]; };$/;"	s	class:std::money_base	access:public
field	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct pattern { char field[4]; };$/;"	m	struct:std::money_base::pattern	access:public
_S_default_pattern	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    static const pattern _S_default_pattern;$/;"	m	class:std::money_base	access:public
_S_minus	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_minus,$/;"	e	enum:std::money_base::__anon3
_S_zero	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_zero,$/;"	e	enum:std::money_base::__anon3
_S_end	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _S_end = 11$/;"	e	enum:std::money_base::__anon3
_S_atoms	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    static const char* _S_atoms;$/;"	m	class:std::money_base	access:public
_S_construct_pattern	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    _S_construct_pattern(char __precedes, char __space, char __posn);$/;"	p	class:std::money_base	access:public	signature:(char __precedes, char __space, char __posn)
__moneypunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    struct __moneypunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
_M_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_grouping_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_use_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_curr_symbol	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_curr_symbol;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_curr_symbol_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_curr_symbol_size;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_positive_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_positive_sign;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_positive_sign_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_positive_sign_size;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_negative_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const _CharT*			_M_negative_sign;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_negative_sign_size	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      size_t                            _M_negative_sign_size;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_frac_digits	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      int				_M_frac_digits;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_pos_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      money_base::pattern		_M_pos_format;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_neg_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      money_base::pattern	        _M_neg_format;$/;"	m	struct:std::__moneypunct_cache	access:public
_M_atoms	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _CharT				_M_atoms[money_base::_S_end];$/;"	m	struct:std::__moneypunct_cache	access:public
_M_allocated	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__moneypunct_cache	access:public
__moneypunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __moneypunct_cache(size_t __refs = 0) : facet(__refs),$/;"	f	struct:std::__moneypunct_cache	access:public	signature:(size_t __refs = 0)
~__moneypunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~__moneypunct_cache();$/;"	p	struct:std::__moneypunct_cache	access:public	signature:()
_M_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__moneypunct_cache	access:public	signature:(const locale& __loc)
operator =	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      operator=(const __moneypunct_cache&);$/;"	p	struct:std::__moneypunct_cache	access:private	signature:(const __moneypunct_cache&)
__moneypunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __moneypunct_cache(const __moneypunct_cache&);$/;"	p	struct:std::__moneypunct_cache	access:private	signature:(const __moneypunct_cache&)
~__moneypunct_cache	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()$/;"	f	class:std::__moneypunct_cache	signature:()
moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class moneypunct : public locale::facet, public money_base$/;"	c	namespace:std	inherits:locale::facet,money_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::moneypunct	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::moneypunct	access:public
__cache_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef __moneypunct_cache<_CharT, _Intl>     __cache_type;$/;"	t	class:std::moneypunct	access:public
_M_data	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::moneypunct	access:private
intl	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static const bool			intl = _Intl;$/;"	m	class:std::moneypunct	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::moneypunct	access:public
moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	f	class:std::moneypunct	access:public	signature:(size_t __refs = 0)
moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      moneypunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::moneypunct	access:public	signature:(__cache_type* __cache, size_t __refs = 0)
moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)$/;"	f	class:std::moneypunct	access:public	signature:(__c_locale __cloc, const char* __s, size_t __refs = 0)
decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::moneypunct	access:public	signature:() const
thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::moneypunct	access:public	signature:() const
grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      grouping() const$/;"	f	class:std::moneypunct	access:public	signature:() const
curr_symbol	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      curr_symbol() const$/;"	f	class:std::moneypunct	access:public	signature:() const
positive_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      positive_sign() const$/;"	f	class:std::moneypunct	access:public	signature:() const
negative_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      negative_sign() const$/;"	f	class:std::moneypunct	access:public	signature:() const
frac_digits	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      frac_digits() const$/;"	f	class:std::moneypunct	access:public	signature:() const
pos_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      pos_format() const$/;"	f	class:std::moneypunct	access:public	signature:() const
neg_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      neg_format() const$/;"	f	class:std::moneypunct	access:public	signature:() const
~moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~moneypunct();$/;"	p	class:std::moneypunct	access:protected	signature:()
do_decimal_point	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_thousands_sep	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_grouping	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_curr_symbol	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_curr_symbol()   const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_positive_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_positive_sign() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_negative_sign	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_negative_sign() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_frac_digits	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_frac_digits() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_pos_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_pos_format() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
do_neg_format	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_neg_format() const$/;"	f	class:std::moneypunct	access:protected	signature:() const
_M_initialize_moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^       _M_initialize_moneypunct(__c_locale __cloc = NULL,$/;"	p	class:std::moneypunct	access:protected	signature:(__c_locale __cloc = NULL, const char* __name = NULL)
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id moneypunct<_CharT, _Intl>::id;$/;"	m	class:std::moneypunct
intl	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    const bool moneypunct<_CharT, _Intl>::intl;$/;"	m	class:std::moneypunct
~moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<char, true>::~moneypunct();$/;"	p	class:std::moneypunct	signature:()
~moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<char, false>::~moneypunct();$/;"	p	class:std::moneypunct	signature:()
_M_initialize_moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	p	class:std::moneypunct	signature:(__c_locale, const char*)
_M_initialize_moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	p	class:std::moneypunct	signature:(__c_locale, const char*)
~moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<wchar_t, true>::~moneypunct();$/;"	p	class:std::moneypunct	signature:()
~moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<wchar_t, false>::~moneypunct();$/;"	p	class:std::moneypunct	signature:()
_M_initialize_moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,$/;"	p	class:std::moneypunct	signature:(__c_locale, const char*)
_M_initialize_moneypunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,$/;"	p	class:std::moneypunct	signature:(__c_locale, const char*)
moneypunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class moneypunct_byname : public moneypunct<_CharT, _Intl>$/;"	c	namespace:std	inherits:moneypunct
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::moneypunct_byname	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::moneypunct_byname	access:public
intl	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static const bool intl = _Intl;$/;"	m	class:std::moneypunct_byname	access:public
moneypunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      moneypunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::moneypunct_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~moneypunct_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~moneypunct_byname() { }$/;"	f	class:std::moneypunct_byname	access:protected	signature:()
intl	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    const bool moneypunct_byname<_CharT, _Intl>::intl;$/;"	m	class:std::moneypunct_byname
money_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class money_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::money_get	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::money_get	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::money_get	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::money_get	access:public
money_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      money_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::money_get	access:public	signature:(size_t __refs = 0)
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	f	class:std::money_get	access:public	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, long double& __units) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	f	class:std::money_get	access:public	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, string_type& __digits) const
~money_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~money_get() { }$/;"	f	class:std::money_get	access:protected	signature:()
__do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	p	class:std::money_get	access:protected	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, double& __units) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	p	class:std::money_get	access:protected	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, long double& __units) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	p	class:std::money_get	access:protected	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, string_type& __digits) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	p	class:std::money_get	access:protected	signature:(iter_type __s, iter_type __end, bool __intl, ios_base& __io, ios_base::iostate& __err, long double& __units) const
_M_extract	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_extract(iter_type __s, iter_type __end, ios_base& __io,$/;"	p	class:std::money_get	access:protected	signature:(iter_type __s, iter_type __end, ios_base& __io, ios_base::iostate& __err, string& __digits) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id money_get<_CharT, _InIter>::id;$/;"	m	class:std::money_get
money_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class money_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::money_put	access:public
iter_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	t	class:std::money_put	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::money_put	access:public
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::money_put	access:public
money_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      money_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::money_put	access:public	signature:(size_t __refs = 0)
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	f	class:std::money_put	access:public	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, long double __units) const
put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	f	class:std::money_put	access:public	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, const string_type& __digits) const
~money_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~money_put() { }$/;"	f	class:std::money_put	access:protected	signature:()
__do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	p	class:std::money_put	access:protected	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, double __units) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	p	class:std::money_put	access:protected	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, long double __units) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	p	class:std::money_put	access:protected	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, const string_type& __digits) const
do_put	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	p	class:std::money_put	access:protected	signature:(iter_type __s, bool __intl, ios_base& __io, char_type __fill, long double __units) const
_M_insert	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^        _M_insert(iter_type __s, ios_base& __io, char_type __fill,$/;"	p	class:std::money_put	access:protected	signature:(iter_type __s, ios_base& __io, char_type __fill, const string_type& __digits) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id money_put<_CharT, _OutIter>::id;$/;"	m	class:std::money_put
messages_base	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^  struct messages_base$/;"	s	namespace:std
catalog	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    typedef int catalog;$/;"	t	struct:std::messages_base	access:public
messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class messages : public locale::facet, public messages_base$/;"	c	namespace:std	inherits:locale::facet,messages_base
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::messages	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::messages	access:public
_M_c_locale_messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      __c_locale			_M_c_locale_messages;$/;"	m	class:std::messages	access:protected
_M_name_messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      const char*			_M_name_messages;$/;"	m	class:std::messages	access:protected
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::messages	access:public
messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      messages(size_t __refs = 0);$/;"	p	class:std::messages	access:public	signature:(size_t __refs = 0)
messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	p	class:std::messages	access:public	signature:(__c_locale __cloc, const char* __s, size_t __refs = 0)
open	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      open(const basic_string<char>& __s, const locale& __loc) const$/;"	f	class:std::messages	access:public	signature:(const basic_string<char>& __s, const locale& __loc) const
open	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      open(const basic_string<char>&, const locale&, const char*) const;$/;"	p	class:std::messages	access:public	signature:(const basic_string<char>&, const locale&, const char*) const
get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      get(catalog __c, int __set, int __msgid, const string_type& __s) const$/;"	f	class:std::messages	access:public	signature:(catalog __c, int __set, int __msgid, const string_type& __s) const
close	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      close(catalog __c) const$/;"	f	class:std::messages	access:public	signature:(catalog __c) const
~messages	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~messages();$/;"	p	class:std::messages	access:protected	signature:()
do_open	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_open(const basic_string<char>&, const locale&) const;$/;"	p	class:std::messages	access:protected	signature:(const basic_string<char>&, const locale&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_get(catalog, int, int, const string_type& __dfault) const;$/;"	p	class:std::messages	access:protected	signature:(catalog, int, int, const string_type& __dfault) const
do_close	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      do_close(catalog) const;$/;"	p	class:std::messages	access:protected	signature:(catalog) const
_M_convert_to_char	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_convert_to_char(const string_type& __msg) const$/;"	f	class:std::messages	access:protected	signature:(const string_type& __msg) const
_M_convert_from_char	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      _M_convert_from_char(char*) const$/;"	f	class:std::messages	access:protected	signature:(char*) const
id	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    locale::id messages<_CharT>::id;$/;"	m	class:std::messages
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    messages<char>::do_get(catalog, int, int, const string&) const;$/;"	p	class:std::messages	signature:(catalog, int, int, const string&) const
do_get	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;$/;"	p	class:std::messages	signature:(catalog, int, int, const wstring&) const
messages_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    class messages_byname : public messages<_CharT>$/;"	c	namespace:std	inherits:messages
char_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::messages_byname	access:public
string_type	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::messages_byname	access:public
messages_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      messages_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::messages_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~messages_byname	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^      ~messages_byname()$/;"	f	class:std::messages_byname	access:protected	signature:()
std	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^namespace std {$/;"	n
isspace	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isprint	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
iscntrl	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
islower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isalpha	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isdigit	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
ispunct	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isxdigit	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isalnum	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
isgraph	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
toupper	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
tolower	/home/alan/.vim/tags/cpp_src/locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	signature:(_CharT __c, const locale& __loc)
_STL_UNINITIALIZED_H	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^namespace std {$/;"	n
__uninitialized_copy_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __true_type)
__uninitialized_copy_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __false_type)
uninitialized_copy	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
uninitialized_copy	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^  uninitialized_copy(const char* __first, const char* __last, char* __result)$/;"	f	namespace:std	signature:(const char* __first, const char* __last, char* __result)
uninitialized_copy	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	namespace:std	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
__uninitialized_fill_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __true_type)
__uninitialized_fill_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __false_type)
uninitialized_fill	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
__uninitialized_fill_n_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __true_type)
__uninitialized_fill_n_aux	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __false_type)
uninitialized_fill_n	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x)
__uninitialized_copy_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator __alloc)
__uninitialized_copy_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>)
__uninitialized_fill_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, _Allocator __alloc)
__uninitialized_fill_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, allocator<_Tp2>)
__uninitialized_fill_n_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, _Allocator __alloc)
__uninitialized_fill_n_a	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, allocator<_Tp2>)
__uninitialized_copy_copy	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_copy(_InputIterator1 __first1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator __alloc)
__uninitialized_fill_copy	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,$/;"	f	namespace:std	signature:(_ForwardIterator __result, _ForwardIterator __mid, const _Tp& __x, _InputIterator __first, _InputIterator __last, _Allocator __alloc)
__uninitialized_copy_fill	/home/alan/.vim/tags/cpp_src/stl_uninitialized.h	/^    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp& __x, _Allocator __alloc)
_DEQUE_H	/home/alan/.vim/tags/cpp_src/stl_deque.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^namespace std {$/;"	n
__deque_buf_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^  __deque_buf_size(size_t __size)$/;"	f	namespace:std	signature:(size_t __size)
_Deque_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    struct _Deque_iterator$/;"	s	namespace:std
iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Deque_iterator	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Deque_iterator	access:public
_S_buffer_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
iterator_category	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef std::random_access_iterator_tag iterator_category;$/;"	t	struct:std::_Deque_iterator	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Tp                             value_type;$/;"	t	struct:std::_Deque_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Ptr                            pointer;$/;"	t	struct:std::_Deque_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Ref                            reference;$/;"	t	struct:std::_Deque_iterator	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef size_t                          size_type;$/;"	t	struct:std::_Deque_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef ptrdiff_t                       difference_type;$/;"	t	struct:std::_Deque_iterator	access:public
_Map_pointer	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Tp**                           _Map_pointer;$/;"	t	struct:std::_Deque_iterator	access:public
_Self	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_iterator                 _Self;$/;"	t	struct:std::_Deque_iterator	access:public
_M_cur	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Tp* _M_cur;$/;"	m	struct:std::_Deque_iterator	access:public
_M_first	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Tp* _M_first;$/;"	m	struct:std::_Deque_iterator	access:public
_M_last	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Tp* _M_last;$/;"	m	struct:std::_Deque_iterator	access:public
_M_node	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Map_pointer _M_node;$/;"	m	struct:std::_Deque_iterator	access:public
_Deque_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_iterator(_Tp* __x, _Map_pointer __y)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
_Deque_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
_Deque_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_iterator(const iterator& __x)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const iterator& __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator*() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator->() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator++()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator++(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator--()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator--(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator +=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator+=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator +	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator+(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator -=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator-=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator -	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator-(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator []	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator[](difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
_M_set_node	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_set_node(_Map_pointer __new_node)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
operator ==	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator ==	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator -	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator -	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator +	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
fill	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,$/;"	p	namespace:std	signature:(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first, const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
_Deque_base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    class _Deque_base$/;"	c	namespace:std
allocator_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Alloc                  allocator_type;$/;"	t	class:std::_Deque_base	access:public
get_allocator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::_Deque_base	access:public	signature:() const
iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:std::_Deque_base	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:std::_Deque_base	access:public
_Deque_base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
_Deque_base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_base(const allocator_type& __a)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a)
~_Deque_base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      ~_Deque_base();$/;"	p	class:std::_Deque_base	access:public	signature:()
_Map_alloc_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Deque_impl	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      struct _Deque_impl$/;"	s	class:std::_Deque_base	inherits:_Tp_alloc_type	access:protected
_M_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^	_Tp** _M_map;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_map_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^	size_t _M_map_size;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_start	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^	iterator _M_start;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_finish	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^	iterator _M_finish;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_Deque_impl	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^	_Deque_impl(const _Tp_alloc_type& __a)$/;"	f	struct:std::_Deque_base::_Deque_impl	access:public	signature:(const _Tp_alloc_type& __a)
_M_get_Tp_allocator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_get_Tp_allocator()$/;"	f	class:std::_Deque_base	access:protected	signature:()
_M_get_Tp_allocator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
_M_get_map_allocator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_get_map_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
_M_allocate_node	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_allocate_node()$/;"	f	class:std::_Deque_base	access:protected	signature:()
_M_deallocate_node	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_deallocate_node(_Tp* __p)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp* __p)
_M_allocate_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_allocate_map(size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(size_t __n)
_M_deallocate_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_deallocate_map(_Tp** __p, size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_initialize_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_initialize_map(size_t);$/;"	p	class:std::_Deque_base	access:protected	signature:(size_t)
_M_create_nodes	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_destroy_nodes	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_S_initial_map_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon4
_M_impl	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _Deque_impl _M_impl;$/;"	m	class:std::_Deque_base	access:protected
~_Deque_base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    ~_Deque_base()$/;"	f	class:std::_Deque_base	signature:()
_M_initialize_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    _M_initialize_map(size_t __num_elements)$/;"	f	class:std::_Deque_base	signature:(size_t __num_elements)
_M_create_nodes	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_destroy_nodes	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    class deque : protected _Deque_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Deque_base
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Alloc::value_type        _Alloc_value_type;$/;"	t	class:std::deque	access:private
_Base	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Deque_base<_Tp, _Alloc>           _Base;$/;"	t	class:std::deque	access:private
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;$/;"	t	class:std::deque	access:private
value_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::deque	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::deque	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::deque	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::deque	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::deque	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Base::iterator                   iterator;$/;"	t	class:std::deque	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef typename _Base::const_iterator             const_iterator;$/;"	t	class:std::deque	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::deque	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::deque	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef size_t                             size_type;$/;"	t	class:std::deque	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	class:std::deque	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef _Alloc                             allocator_type;$/;"	t	class:std::deque	access:public
_Map_pointer	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      typedef pointer*                           _Map_pointer;$/;"	t	class:std::deque	access:protected
_S_buffer_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	class:std::deque	access:protected	signature:()
deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      deque(const allocator_type& __a = allocator_type())$/;"	f	class:std::deque	access:public	signature:(const allocator_type& __a = allocator_type())
deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      deque(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      deque(const deque& __x)$/;"	f	class:std::deque	access:public	signature:(const deque& __x)
deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
~deque	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      ~deque()$/;"	f	class:std::deque	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator=(const deque& __x);$/;"	p	class:std::deque	access:public	signature:(const deque& __x)
assign	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __val)
assign	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
get_allocator	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::deque	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      begin()$/;"	f	class:std::deque	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      begin() const$/;"	f	class:std::deque	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      end()$/;"	f	class:std::deque	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      end() const$/;"	f	class:std::deque	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      rbegin()$/;"	f	class:std::deque	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      rbegin() const$/;"	f	class:std::deque	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      rend()$/;"	f	class:std::deque	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      rend() const$/;"	f	class:std::deque	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      size() const$/;"	f	class:std::deque	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      max_size() const$/;"	f	class:std::deque	access:public	signature:() const
resize	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::deque	access:public	signature:(size_type __new_size, value_type __x = value_type())
empty	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      empty() const$/;"	f	class:std::deque	access:public	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator[](size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
operator []	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      operator[](size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
_M_range_check	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::deque	access:protected	signature:(size_type __n) const
at	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      at(size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
at	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      at(size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      front()$/;"	f	class:std::deque	access:public	signature:()
front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      front() const$/;"	f	class:std::deque	access:public	signature:() const
back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      back()$/;"	f	class:std::deque	access:public	signature:()
back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      back() const$/;"	f	class:std::deque	access:public	signature:() const
push_front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      push_front(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
push_back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      push_back(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
pop_front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      pop_front()$/;"	f	class:std::deque	access:public	signature:()
pop_back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      pop_back()$/;"	f	class:std::deque	access:public	signature:()
insert	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::deque	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::deque	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      erase(iterator __position);$/;"	p	class:std::deque	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::deque	access:public	signature:(iterator __first, iterator __last)
swap	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      swap(deque& __x)$/;"	f	class:std::deque	access:public	signature:(deque& __x)
clear	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      clear()$/;"	f	class:std::deque	access:public	signature:()
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_range_initialize	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_initialize	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_fill_initialize	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_fill_initialize(const value_type& __value);$/;"	p	class:std::deque	access:protected	signature:(const value_type& __value)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_fill_assign	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_fill_assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:protected	signature:(size_type __n, const value_type& __val)
_M_push_back_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_push_back_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_push_front_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_push_front_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_pop_back_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_pop_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_pop_front_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      void _M_pop_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_range_insert_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _InputIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_insert_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_fill_insert	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_insert_aux(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_destroy_data_aux	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_destroy_data_aux(iterator __first, iterator __last);$/;"	p	class:std::deque	access:protected	signature:(iterator __first, iterator __last)
_M_destroy_data_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }$/;"	f	class:std::deque	access:protected	signature:(iterator, iterator, __true_type)
_M_destroy_data_dispatch	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, __false_type)
_M_destroy_data	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const _Alloc1&)
_M_destroy_data	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_destroy_data(iterator __first, iterator __last,$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const std::allocator<_Tp>&)
_M_erase_at_begin	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_erase_at_begin(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
_M_erase_at_end	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_erase_at_end(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
_M_reserve_elements_at_front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_reserve_elements_at_front(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_reserve_elements_at_back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_reserve_elements_at_back(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_new_elements_at_front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_reserve_map_at_back	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_reserve_map_at_back(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_reserve_map_at_front	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_reserve_map_at_front(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_reallocate_map	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:std::deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
operator ==	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_deque.h	/^    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)$/;"	f	namespace:std	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
_BASIC_IOS_H	/home/alan/.vim/tags/cpp_src/basic_ios.h	37;"	d
std	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^namespace std {$/;"	n
basic_ios	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^    class basic_ios : public ios_base$/;"	c	namespace:std	inherits:ios_base
char_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	t	class:std::basic_ios	access:public
int_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	t	class:std::basic_ios	access:public
pos_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	t	class:std::basic_ios	access:public
off_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	t	class:std::basic_ios	access:public
traits_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	t	class:std::basic_ios	access:public
__ctype_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	t	class:std::basic_ios	access:public
__num_put_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^						     __num_put_type;$/;"	t	class:std::basic_ios	access:public
__num_get_type	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^						     __num_get_type;$/;"	t	class:std::basic_ios	access:public
_M_tie	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	m	class:std::basic_ios	access:protected
_M_fill	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	m	class:std::basic_ios	access:protected
_M_fill_init	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	m	class:std::basic_ios	access:protected
_M_streambuf	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	m	class:std::basic_ios	access:protected
_M_ctype	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	m	class:std::basic_ios	access:protected
_M_num_put	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	m	class:std::basic_ios	access:protected
_M_num_get	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	m	class:std::basic_ios	access:protected
operator void*	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      operator void*() const$/;"	f	class:std::basic_ios	access:public	signature:() const
operator !	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      operator!() const$/;"	f	class:std::basic_ios	access:public	signature:() const
rdstate	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      rdstate() const$/;"	f	class:std::basic_ios	access:public	signature:() const
clear	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	access:public	signature:(iostate __state = goodbit)
setstate	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios	access:public	signature:(iostate __state)
_M_setstate	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios	access:public	signature:(iostate __state)
good	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      good() const$/;"	f	class:std::basic_ios	access:public	signature:() const
eof	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      eof() const$/;"	f	class:std::basic_ios	access:public	signature:() const
fail	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      fail() const$/;"	f	class:std::basic_ios	access:public	signature:() const
bad	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      bad() const$/;"	f	class:std::basic_ios	access:public	signature:() const
exceptions	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      exceptions() const$/;"	f	class:std::basic_ios	access:public	signature:() const
exceptions	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios	access:public	signature:(iostate __except)
basic_ios	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT, _Traits>* __sb)
~basic_ios	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios	access:public	signature:()
tie	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      tie() const$/;"	f	class:std::basic_ios	access:public	signature:() const
tie	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios	access:public	signature:(basic_ostream<_CharT, _Traits>* __tiestr)
rdbuf	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      rdbuf() const$/;"	f	class:std::basic_ios	access:public	signature:() const
rdbuf	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT, _Traits>* __sb)
copyfmt	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	access:public	signature:(const basic_ios& __rhs)
fill	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      fill() const$/;"	f	class:std::basic_ios	access:public	signature:() const
fill	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios	access:public	signature:(char_type __ch)
imbue	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	access:public	signature:(const locale& __loc)
narrow	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      narrow(char_type __c, char __dfault) const;$/;"	p	class:std::basic_ios	access:public	signature:(char_type __c, char __dfault) const
widen	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      widen(char __c) const;$/;"	p	class:std::basic_ios	access:public	signature:(char __c) const
basic_ios	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      basic_ios()$/;"	f	class:std::basic_ios	access:protected	signature:()
init	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	access:protected	signature:(basic_streambuf<_CharT, _Traits>* __sb)
_M_cache_locale	/home/alan/.vim/tags/cpp_src/basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	access:protected	signature:(const locale& __loc)
_OSTREAM_INSERT_H	/home/alan/.vim/tags/cpp_src/ostream_insert.h	36;"	d
std	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^namespace std {$/;"	n
__ostream_write	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s, streamsize __n)
__ostream_fill	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
__ostream_insert	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s, streamsize __n)
__ostream_insert	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);$/;"	p	namespace:std	signature:(ostream&, const char*, streamsize)
__ostream_insert	/home/alan/.vim/tags/cpp_src/ostream_insert.h	/^  extern template wostream& __ostream_insert(wostream&, const wchar_t*,$/;"	p	namespace:std	signature:(wostream&, const wchar_t*, streamsize)
_CPP_TYPE_TRAITS_H	/home/alan/.vim/tags/cpp_src/cpp_type_traits.h	39;"	d
_ITERATOR_BASE_FUNCS_H	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	66;"	d
std	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^namespace std {$/;"	n
__distance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__distance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
distance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last)
__advance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n, input_iterator_tag)
__advance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
__advance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
advance	/home/alan/.vim/tags/cpp_src/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n)
_SLICE_ARRAY_H	/home/alan/.vim/tags/cpp_src/slice_array.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/slice_array.h	/^namespace std {$/;"	n
slice	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  class slice$/;"	c	namespace:std
slice	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice();$/;"	p	class:std::slice	access:public	signature:()
slice	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice(size_t, size_t, size_t);$/;"	p	class:std::slice	access:public	signature:(size_t, size_t, size_t)
start	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t start() const;$/;"	p	class:std::slice	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t size() const;$/;"	p	class:std::slice	access:public	signature:() const
stride	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t stride() const;$/;"	p	class:std::slice	access:public	signature:() const
_M_off	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t _M_off;                      \/\/ offset$/;"	m	class:std::slice	access:private
_M_sz	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t _M_sz;			\/\/ size$/;"	m	class:std::slice	access:private
_M_st	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    size_t _M_st;			\/\/ stride unit$/;"	m	class:std::slice	access:private
slice	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  slice::slice() {}$/;"	f	class:std::slice	signature:()
slice	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  slice::slice(size_t __o, size_t __d, size_t __s)$/;"	f	class:std::slice	signature:(size_t __o, size_t __d, size_t __s)
start	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  slice::start() const$/;"	f	class:std::slice	signature:() const
size	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  slice::size() const$/;"	f	class:std::slice	signature:() const
stride	/home/alan/.vim/tags/cpp_src/slice_array.h	/^  slice::stride() const$/;"	f	class:std::slice	signature:() const
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    class slice_array$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      typedef _Tp value_type;$/;"	t	class:std::slice_array	access:public
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      slice_array(const slice_array&);$/;"	p	class:std::slice_array	access:public	signature:(const slice_array&)
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      slice_array& operator=(const slice_array&);$/;"	p	class:std::slice_array	access:public	signature:(const slice_array&)
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const valarray<_Tp>&) const
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      void operator=(const _Tp &) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Tp &) const
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/slice_array.h	/^	void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::slice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      slice_array(_Array<_Tp>, const slice&);$/;"	p	class:std::slice_array	access:private	signature:(_Array<_Tp>, const slice&)
_M_sz	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      const size_t      _M_sz;$/;"	m	class:std::slice_array	access:private
_M_stride	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      const size_t      _M_stride;$/;"	m	class:std::slice_array	access:private
_M_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      const _Array<_Tp> _M_array;$/;"	m	class:std::slice_array	access:private
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^      slice_array();$/;"	p	class:std::slice_array	access:private	signature:()
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::slice_array(_Array<_Tp> __a, const slice& __s)$/;"	f	class:std::slice_array	signature:(_Array<_Tp> __a, const slice& __s)
slice_array	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)$/;"	f	class:std::slice_array	signature:(const slice_array<_Tp>& a)
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)$/;"	f	class:std::slice_array	signature:(const slice_array<_Tp>& __a)
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::operator=(const _Tp& __t) const$/;"	f	class:std::slice_array	signature:(const _Tp& __t) const
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	f	class:std::slice_array	signature:(const valarray<_Tp>& __v) const
operator =	/home/alan/.vim/tags/cpp_src/slice_array.h	/^    slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const$/;"	f	class:std::slice_array	signature:(const _Expr<_Dom,_Tp>& __e) const
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/slice_array.h	236;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/slice_array.h	237;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/slice_array.h	265;"	d
_SET_H	/home/alan/.vim/tags/cpp_src/stl_set.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_set.h	/^namespace std {$/;"	n
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    class set$/;"	c	namespace:std
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::set	access:private
key_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef _Key     key_type;$/;"	t	class:std::set	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef _Key     value_type;$/;"	t	class:std::set	access:public
key_compare	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef _Compare key_compare;$/;"	t	class:std::set	access:public
value_compare	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef _Compare value_compare;$/;"	t	class:std::set	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::set	access:public
_Key_alloc_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::set	access:private
_Rep_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::set	access:private
_M_t	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:std::set	access:private
pointer	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::set	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::set	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::set	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::set	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::set	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::set	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::set	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::set	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::set	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::set	access:public
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      set()$/;"	f	class:std::set	access:public	signature:()
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      set(const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      set(const set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
operator =	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
key_comp	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      key_comp() const$/;"	f	class:std::set	access:public	signature:() const
value_comp	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      value_comp() const$/;"	f	class:std::set	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      get_allocator() const$/;"	f	class:std::set	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      begin() const$/;"	f	class:std::set	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      end() const$/;"	f	class:std::set	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      rbegin() const$/;"	f	class:std::set	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      rend() const$/;"	f	class:std::set	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      empty() const$/;"	f	class:std::set	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      size() const$/;"	f	class:std::set	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      max_size() const$/;"	f	class:std::set	access:public	signature:() const
swap	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      swap(set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      insert(const value_type& __x)$/;"	f	class:std::set	access:public	signature:(const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::set	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_set.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      erase(iterator __position)$/;"	f	class:std::set	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      erase(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
erase	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::set	access:public	signature:(iterator __first, iterator __last)
clear	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      clear()$/;"	f	class:std::set	access:public	signature:()
count	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      count(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
find	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      find(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
find	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      find(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
equal_range	/home/alan/.vim/tags/cpp_src/stl_set.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
operator ==	/home/alan/.vim/tags/cpp_src/stl_set.h	/^        operator== (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_set.h	/^        operator< (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
operator ==	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator==(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator<(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator!=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator>(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator<=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    operator>=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_set.h	/^    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)$/;"	f	namespace:std	signature:(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
_IOS_BASE_H	/home/alan/.vim/tags/cpp_src/ios_base.h	41;"	d
std	/home/alan/.vim/tags/cpp_src/ios_base.h	/^namespace std {$/;"	n
_Ios_Fmtflags	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  enum _Ios_Fmtflags $/;"	g	namespace:std
_S_boolalpha	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags
_S_dec	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags
_S_fixed	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags
_S_hex	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags
_S_internal	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags
_S_left	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_left 		= 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags
_S_oct	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags
_S_right	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_right 		= 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags
_S_scientific	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags
_S_showbase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags
_S_showpoint	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags
_S_showpos	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags
_S_skipws	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags
_S_unitbuf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags
_S_uppercase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags
_S_adjustfield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags
_S_basefield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags
_S_floatfield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags
_S_ios_fmtflags_end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16 $/;"	e	enum:std::_Ios_Fmtflags
operator &	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
operator |	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
operator ^	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
operator |=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
operator &=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
operator ^=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	signature:(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
operator ~	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator~(_Ios_Fmtflags __a)$/;"	f	namespace:std	signature:(_Ios_Fmtflags __a)
_Ios_Openmode	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  enum _Ios_Openmode $/;"	g	namespace:std
_S_app	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_app 		= 1L << 0,$/;"	e	enum:std::_Ios_Openmode
_S_ate	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	e	enum:std::_Ios_Openmode
_S_bin	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	e	enum:std::_Ios_Openmode
_S_in	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_in 		= 1L << 3,$/;"	e	enum:std::_Ios_Openmode
_S_out	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_out 		= 1L << 4,$/;"	e	enum:std::_Ios_Openmode
_S_trunc	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	e	enum:std::_Ios_Openmode
_S_ios_openmode_end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_ios_openmode_end = 1L << 16 $/;"	e	enum:std::_Ios_Openmode
operator &	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode __a, _Ios_Openmode __b)
operator |	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode __a, _Ios_Openmode __b)
operator ^	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode __a, _Ios_Openmode __b)
operator |=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode& __a, _Ios_Openmode __b)
operator &=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode& __a, _Ios_Openmode __b)
operator ^=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	signature:(_Ios_Openmode& __a, _Ios_Openmode __b)
operator ~	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator~(_Ios_Openmode __a)$/;"	f	namespace:std	signature:(_Ios_Openmode __a)
_Ios_Iostate	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  enum _Ios_Iostate$/;"	g	namespace:std
_S_goodbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_goodbit 		= 0,$/;"	e	enum:std::_Ios_Iostate
_S_badbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	e	enum:std::_Ios_Iostate
_S_eofbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	e	enum:std::_Ios_Iostate
_S_failbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	e	enum:std::_Ios_Iostate
_S_ios_iostate_end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_ios_iostate_end = 1L << 16 $/;"	e	enum:std::_Ios_Iostate
operator &	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate __a, _Ios_Iostate __b)
operator |	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate __a, _Ios_Iostate __b)
operator ^	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate __a, _Ios_Iostate __b)
operator |=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate& __a, _Ios_Iostate __b)
operator &=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate& __a, _Ios_Iostate __b)
operator ^=	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	signature:(_Ios_Iostate& __a, _Ios_Iostate __b)
operator ~	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  operator~(_Ios_Iostate __a)$/;"	f	namespace:std	signature:(_Ios_Iostate __a)
_Ios_Seekdir	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  enum _Ios_Seekdir $/;"	g	namespace:std
_S_beg	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir
_S_cur	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_cur = SEEK_CUR,$/;"	e	enum:std::_Ios_Seekdir
_S_end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_end = SEEK_END,$/;"	e	enum:std::_Ios_Seekdir
_S_ios_seekdir_end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	e	enum:std::_Ios_Seekdir
ios_base	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  class ios_base$/;"	c	namespace:std
failure	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    class failure : public exception$/;"	c	class:std::ios_base	inherits:exception	access:public
failure	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      failure(const string& __str) throw();$/;"	p	class:std::ios_base::failure	access:public	signature:(const string& __str)
~failure	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	access:public	signature:()
what	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      what() const throw();$/;"	p	class:std::ios_base::failure	access:public	signature:() const
_M_msg	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      string _M_msg;$/;"	m	class:std::ios_base::failure	access:private
fmtflags	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	access:public
boolalpha	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	m	class:std::ios_base	access:public
dec	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	m	class:std::ios_base	access:public
fixed	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	m	class:std::ios_base	access:public
hex	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	m	class:std::ios_base	access:public
internal	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	m	class:std::ios_base	access:public
left	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	m	class:std::ios_base	access:public
oct	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	m	class:std::ios_base	access:public
right	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	m	class:std::ios_base	access:public
scientific	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	m	class:std::ios_base	access:public
showbase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	m	class:std::ios_base	access:public
showpoint	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	m	class:std::ios_base	access:public
showpos	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	m	class:std::ios_base	access:public
skipws	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	m	class:std::ios_base	access:public
unitbuf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	m	class:std::ios_base	access:public
uppercase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	m	class:std::ios_base	access:public
adjustfield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	access:public
basefield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	m	class:std::ios_base	access:public
floatfield	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	m	class:std::ios_base	access:public
iostate	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	access:public
badbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	m	class:std::ios_base	access:public
eofbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	m	class:std::ios_base	access:public
failbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	m	class:std::ios_base	access:public
goodbit	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	m	class:std::ios_base	access:public
openmode	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	access:public
app	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode app =		_S_app;$/;"	m	class:std::ios_base	access:public
ate	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	m	class:std::ios_base	access:public
binary	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	m	class:std::ios_base	access:public
in	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode in =		_S_in;$/;"	m	class:std::ios_base	access:public
out	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode out =		_S_out;$/;"	m	class:std::ios_base	access:public
trunc	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	m	class:std::ios_base	access:public
seekdir	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	access:public
beg	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	m	class:std::ios_base	access:public
cur	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	m	class:std::ios_base	access:public
end	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    static const seekdir end =		_S_end;$/;"	m	class:std::ios_base	access:public
io_state	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef int io_state;$/;"	t	class:std::ios_base	access:public
open_mode	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef int open_mode;$/;"	t	class:std::ios_base	access:public
seek_dir	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef int seek_dir;$/;"	t	class:std::ios_base	access:public
streampos	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef std::streampos streampos;$/;"	t	class:std::ios_base	access:public
streamoff	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef std::streamoff streamoff;$/;"	t	class:std::ios_base	access:public
event	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    enum event$/;"	g	class:std::ios_base	access:public
erase_event	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      erase_event,$/;"	e	enum:std::ios_base::event
imbue_event	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      imbue_event,$/;"	e	enum:std::ios_base::event
copyfmt_event	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      copyfmt_event$/;"	e	enum:std::ios_base::event
event_callback	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    typedef void (*event_callback) (event, ios_base&, int);$/;"	t	class:std::ios_base	access:public
register_callback	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	access:public	signature:(event_callback __fn, int __index)
_M_precision	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    streamsize		_M_precision;$/;"	m	class:std::ios_base	access:protected
_M_width	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    streamsize		_M_width;$/;"	m	class:std::ios_base	access:protected
_M_flags	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    fmtflags		_M_flags;$/;"	m	class:std::ios_base	access:protected
_M_exception	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    iostate		_M_exception;$/;"	m	class:std::ios_base	access:protected
_M_streambuf_state	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    iostate		_M_streambuf_state;$/;"	m	class:std::ios_base	access:protected
_Callback_list	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    struct _Callback_list$/;"	s	class:std::ios_base	access:protected
_M_next	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _Callback_list*		_M_next;$/;"	m	struct:std::ios_base::_Callback_list	access:public
_M_fn	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	m	struct:std::ios_base::_Callback_list	access:public
_M_index	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      int			_M_index;$/;"	m	struct:std::ios_base::_Callback_list	access:public
_M_refcount	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	m	struct:std::ios_base::_Callback_list	access:public
_Callback_list	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn, int __index, _Callback_list* __cb)
_M_add_reference	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:()
_M_remove_reference	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _M_remove_reference() $/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:()
_M_callbacks	/home/alan/.vim/tags/cpp_src/ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	m	class:std::ios_base	access:protected
_M_call_callbacks	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	access:protected	signature:(event __ev)
_M_dispose_callbacks	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _M_dispose_callbacks(void);$/;"	p	class:std::ios_base	access:protected	signature:(void)
_Words	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    struct _Words$/;"	s	class:std::ios_base	access:protected
_M_pword	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      void*	_M_pword;$/;"	m	struct:std::ios_base::_Words	access:public
_M_iword	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      long	_M_iword;$/;"	m	struct:std::ios_base::_Words	access:public
_Words	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words	access:public	signature:()
_M_word_zero	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _Words		_M_word_zero;$/;"	m	class:std::ios_base	access:protected
_S_local_word_size	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon5
_M_local_word	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	access:protected
_M_word_size	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    int			_M_word_size;$/;"	m	class:std::ios_base	access:protected
_M_word	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _Words*		_M_word;$/;"	m	class:std::ios_base	access:protected
_M_grow_words	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	access:protected	signature:(int __index, bool __iword)
_M_ios_locale	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    locale		_M_ios_locale;$/;"	m	class:std::ios_base	access:protected
_M_init	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _M_init();$/;"	p	class:std::ios_base	access:protected	signature:()
Init	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    class Init$/;"	c	class:std::ios_base	access:public
Init	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
~Init	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      ~Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
_S_refcount	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	m	class:std::ios_base::Init	access:private
_S_synced_with_stdio	/home/alan/.vim/tags/cpp_src/ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	access:private
flags	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    flags() const { return _M_flags; }$/;"	f	class:std::ios_base	access:public	signature:() const
flags	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base	access:public	signature:(fmtflags __fmtfl)
setf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base	access:public	signature:(fmtflags __fmtfl)
setf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base	access:public	signature:(fmtflags __fmtfl, fmtflags __mask)
unsetf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    unsetf(fmtflags __mask) { _M_flags &= ~__mask; }$/;"	f	class:std::ios_base	access:public	signature:(fmtflags __mask)
precision	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    precision() const { return _M_precision; }$/;"	f	class:std::ios_base	access:public	signature:() const
precision	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base	access:public	signature:(streamsize __prec)
width	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    width() const { return _M_width; }$/;"	f	class:std::ios_base	access:public	signature:() const
width	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    width(streamsize __wide)$/;"	f	class:std::ios_base	access:public	signature:(streamsize __wide)
sync_with_stdio	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	access:public	signature:(bool __sync = true)
imbue	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    imbue(const locale& __loc);$/;"	p	class:std::ios_base	access:public	signature:(const locale& __loc)
getloc	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    getloc() const { return _M_ios_locale; }$/;"	f	class:std::ios_base	access:public	signature:() const
_M_getloc	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    _M_getloc() const { return _M_ios_locale; }$/;"	f	class:std::ios_base	access:public	signature:() const
xalloc	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    xalloc() throw();$/;"	p	class:std::ios_base	access:public	signature:()
iword	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    iword(int __ix)$/;"	f	class:std::ios_base	access:public	signature:(int __ix)
pword	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    pword(int __ix)$/;"	f	class:std::ios_base	access:public	signature:(int __ix)
~ios_base	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	access:public	signature:()
ios_base	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    ios_base();$/;"	p	class:std::ios_base	access:protected	signature:()
ios_base	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base&)
operator =	/home/alan/.vim/tags/cpp_src/ios_base.h	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base&)
boolalpha	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
noboolalpha	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
showbase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  showbase(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
noshowbase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
showpoint	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  showpoint(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
noshowpoint	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
showpos	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  showpos(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
noshowpos	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
skipws	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  skipws(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
noskipws	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  noskipws(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
uppercase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  uppercase(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
nouppercase	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
unitbuf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
nounitbuf	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
internal	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  internal(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
left	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  left(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
right	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  right(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
dec	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  dec(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
hex	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  hex(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
oct	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  oct(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
fixed	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  fixed(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
scientific	/home/alan/.vim/tags/cpp_src/ios_base.h	/^  scientific(ios_base& __base)$/;"	f	namespace:std	signature:(ios_base& __base)
_ALGO_H	/home/alan/.vim/tags/cpp_src/stl_algo.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^namespace std {$/;"	n
__median	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
__median	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
for_each	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    for_each(_InputIterator __first, _InputIterator __last, _Function __f)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Function __f)
__find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val, input_iterator_tag)
__find_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred, input_iterator_tag)
__find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __val, random_access_iterator_tag)
__find_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, random_access_iterator_tag)
find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, const _CharT&)
find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val)
find_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
adjacent_find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
adjacent_find	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
count	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __value)
count_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
search	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
search	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)
__search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, std::forward_iterator_tag)
__search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, std::random_access_iterator_tag)
search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val)
__search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::forward_iterator_tag)
__search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
search_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred)
swap_ranges	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
transform	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    transform(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)
transform	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    transform(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)
replace	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    replace(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value)
replace_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    replace_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value)
replace_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    replace_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __old_value, const _Tp& __new_value)
replace_copy_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    replace_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp& __new_value)
generate	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    generate(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)
generate_n	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, _Generator __gen)
remove_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    remove_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value)
remove_copy_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    remove_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
remove	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    remove(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
remove_if	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, forward_iterator_tag, output_iterator_tag)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, input_iterator_tag, output_iterator_tag)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, input_iterator_tag, forward_iterator_tag)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag)
__unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag)
unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
unique_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)
unique	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
unique	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
__reverse	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
__reverse	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
reverse	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
reverse_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)
__gcd	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)$/;"	f	namespace:std	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
__rotate	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __rotate(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, forward_iterator_tag)
__rotate	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __rotate(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, bidirectional_iterator_tag)
__rotate	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __rotate(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, random_access_iterator_tag)
rotate	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    rotate(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)
rotate_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)
random_shuffle	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
random_shuffle	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator& __rand)
__partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)
__partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)
partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
__inplace_stable_partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __inplace_stable_partition(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len)
__stable_partition_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __stable_partition_adaptive(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
stable_partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    stable_partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
__unguarded_partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot)
__unguarded_partition	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot, _Compare __comp)
_S_threshold	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	e	enum:std::__anon6
__unguarded_linear_insert	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val)
__unguarded_linear_insert	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val, _Compare __comp)
__insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__unguarded_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__unguarded_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__final_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__final_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__heap_select	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
__heap_select	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
__lg	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __lg(_Size __n)$/;"	f	namespace:std	signature:(_Size __n)
partial_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
partial_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
partial_sort_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)
partial_sort_copy	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)
__introsort_loop	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit)
__introsort_loop	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
__merge_without_buffer	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2)
__merge_without_buffer	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)
__inplace_stable_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__inplace_stable_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
merge	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
merge	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
__merge_sort_loop	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size)
__merge_sort_loop	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)
_S_chunk_size	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	e	enum:std::__anon7
__chunk_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size)
__chunk_insertion_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)
__merge_sort_with_buffer	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer)
__merge_sort_with_buffer	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)
__merge_backward	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result)
__merge_backward	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)
__rotate_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __rotate_adaptive(_BidirectionalIterator1 __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)
__merge_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
__merge_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
inplace_merge	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)
inplace_merge	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)
__stable_sort_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size)
__stable_sort_adaptive	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
stable_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
stable_sort	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__introselect	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit)
__introselect	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
nth_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)
nth_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)
equal_range	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
equal_range	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
binary_search	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
binary_search	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
includes	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
includes	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
set_union	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_union	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_intersection	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_intersection	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_difference	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_difference	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_symmetric_difference	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_symmetric_difference	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
max_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
max_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
min_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
min_element	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
next_permutation	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
next_permutation	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
prev_permutation	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
prev_permutation	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
find_first_of	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)
find_first_of	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)
__find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag)
__find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
__find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
__find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
find_end	/home/alan/.vim/tags/cpp_src/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)
_ALLOCATOR_H	/home/alan/.vim/tags/cpp_src/allocator.h	50;"	d
std	/home/alan/.vim/tags/cpp_src/allocator.h	/^namespace std {$/;"	n
allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^    class allocator<void>$/;"	c	namespace:std
size_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef size_t      size_type;$/;"	t	class:std::allocator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	access:public
pointer	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef void*       pointer;$/;"	t	class:std::allocator	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	access:public
value_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef void        value_type;$/;"	t	class:std::allocator	access:public
rebind	/home/alan/.vim/tags/cpp_src/allocator.h	/^        struct rebind$/;"	s	class:std::allocator	access:public
other	/home/alan/.vim/tags/cpp_src/allocator.h	/^        { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	access:public
allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^    class allocator: public __glibcxx_base_allocator<_Tp>$/;"	c	namespace:std	inherits:__glibcxx_base_allocator
size_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef size_t     size_type;$/;"	t	class:std::allocator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	access:public
pointer	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::allocator	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	access:public
reference	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::allocator	access:public
const_reference	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	access:public
value_type	/home/alan/.vim/tags/cpp_src/allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::allocator	access:public
rebind	/home/alan/.vim/tags/cpp_src/allocator.h	/^        struct rebind$/;"	s	class:std::allocator	access:public
other	/home/alan/.vim/tags/cpp_src/allocator.h	/^        { typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	access:public
allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^      allocator() throw() { }$/;"	f	class:std::allocator	access:public	signature:()
allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^      allocator(const allocator& __a) throw()$/;"	f	class:std::allocator	access:public	signature:(const allocator& __a)
allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^        allocator(const allocator<_Tp1>&) throw() { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Tp1>&)
~allocator	/home/alan/.vim/tags/cpp_src/allocator.h	/^      ~allocator() throw() { }$/;"	f	class:std::allocator	access:public	signature:()
operator ==	/home/alan/.vim/tags/cpp_src/allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator ==	/home/alan/.vim/tags/cpp_src/allocator.h	/^    operator==(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std	signature:(const allocator<_Tp>&, const allocator<_Tp>&)
operator !=	/home/alan/.vim/tags/cpp_src/allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator !=	/home/alan/.vim/tags/cpp_src/allocator.h	/^    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	f	namespace:std	signature:(const allocator<_Tp>&, const allocator<_Tp>&)
__glibcxx_base_allocator	/home/alan/.vim/tags/cpp_src/allocator.h	142;"	d
__alloc_swap	/home/alan/.vim/tags/cpp_src/allocator.h	/^    struct __alloc_swap$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/allocator.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) { } };$/;"	f	struct:std::__alloc_swap	access:public	signature:(_Alloc&, _Alloc&)
__alloc_swap	/home/alan/.vim/tags/cpp_src/allocator.h	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/allocator.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two)$/;"	f	struct:std::__alloc_swap	access:public	signature:(_Alloc& __one, _Alloc& __two)
_FUNCTION_H	/home/alan/.vim/tags/cpp_src/stl_function.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_function.h	/^namespace std {$/;"	n
unary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
argument_type	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typedef _Arg argument_type;   \/\/\/< @c argument_type is the type of the$/;"	t	struct:std::unary_function	access:public
result_type	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typedef _Result result_type;  \/\/\/< @c result_type is the return type$/;"	t	struct:std::unary_function	access:public
binary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
first_argument_type	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typedef _Arg1 first_argument_type;   \/\/\/< the type of the first argument$/;"	t	struct:std::binary_function	access:public
second_argument_type	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typedef _Arg2 second_argument_type;  \/\/\/< the type of the second argument$/;"	t	struct:std::binary_function	access:public
result_type	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typedef _Result result_type;         \/\/\/< type of the return type$/;"	t	struct:std::binary_function	access:public
plus	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
minus	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
multiplies	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
divides	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
modulus	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
negate	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	access:public	signature:(const _Tp& __x) const
equal_to	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
not_equal_to	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
greater	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
less	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
greater_equal	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
less_equal	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
logical_and	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
logical_or	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
logical_not	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	access:public	signature:(const _Tp& __x) const
unary_negate	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class unary_negate$/;"	c	namespace:std	inherits:unary_function
_M_pred	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	access:protected
unary_negate	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::unary_negate	access:public	signature:(const _Predicate& __x)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
not1	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
binary_negate	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class binary_negate$/;"	c	namespace:std	inherits:binary_function
_M_pred	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	access:protected
binary_negate	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      binary_negate(const _Predicate& __x)$/;"	f	class:std::binary_negate	access:public	signature:(const _Predicate& __x)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
not2	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
binder1st	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function
op	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder1st	access:protected
value	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	access:protected
binder1st	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(typename _Operation::second_argument_type& __x) const
bind1st	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
binder2nd	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function
op	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder2nd	access:protected
value	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	access:protected
binder2nd	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(typename _Operation::first_argument_type& __x) const
bind2nd	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
pointer_to_unary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function
_M_ptr	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	access:protected
pointer_to_unary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      pointer_to_unary_function() {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Arg __x) const
ptr_fun	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (__x)_Arg))
pointer_to_binary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function
_M_ptr	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	access:protected
pointer_to_binary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      pointer_to_binary_function() {}$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
ptr_fun	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	signature:(_Result (__x)_Arg1, _Arg2))
_Identity	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct _Identity : public unary_function<_Tp,_Tp>$/;"	s	namespace:std	inherits:unary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(_Tp& __x) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(const _Tp& __x) const
_Select1st	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct _Select1st : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(_Pair& __x) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(const _Pair& __x) const
_Select2nd	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    struct _Select2nd : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(_Pair& __x) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(const _Pair& __x) const
mem_fun_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp::*__pf)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
const_mem_fun_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
mem_fun_ref_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
const_mem_fun_ref_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
mem_fun1_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp::*__pf)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
const_mem_fun1_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
mem_fun1_ref_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
const_mem_fun1_ref_t	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
operator ()	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
_M_f	/home/alan/.vim/tags/cpp_src/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	/home/alan/.vim/tags/cpp_src/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_LOCALE_FWD_H	/home/alan/.vim/tags/cpp_src/localefwd.h	41;"	d
std	/home/alan/.vim/tags/cpp_src/localefwd.h	/^namespace std {$/;"	n
isspace	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isprint	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
iscntrl	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isupper	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
islower	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isalpha	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isdigit	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
ispunct	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isxdigit	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isalnum	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
isgraph	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
toupper	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
tolower	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	signature:(_CharT, const locale&)
has_facet	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    has_facet(const locale& __loc) throw();$/;"	p	namespace:std	signature:(const locale& __loc)
use_facet	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    use_facet(const locale& __loc);$/;"	p	namespace:std	signature:(const locale& __loc)
__check_facet	/home/alan/.vim/tags/cpp_src/localefwd.h	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std	signature:(const _Facet* __f)
_STL_RELOPS_H	/home/alan/.vim/tags/cpp_src/stl_relops.h	72;"	d
std	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^namespace std {$/;"	n
rel_ops	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^  namespace rel_ops$/;"	n	namespace:std
operator !=	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^      operator!=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^      operator>(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^      operator<=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_relops.h	/^      operator>=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
_CHAR_TRAITS_H	/home/alan/.vim/tags/cpp_src/char_traits.h	41;"	d
_Char_types	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    struct _Char_types$/;"	s
int_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef unsigned long   int_type;$/;"	t	struct:_Char_types	access:public
pos_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef std::streampos  pos_type;$/;"	t	struct:_Char_types	access:public
off_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef std::streamoff  off_type;$/;"	t	struct:_Char_types	access:public
state_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	t	struct:_Char_types	access:public
char_traits	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    struct char_traits$/;"	s
char_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef _CharT                                    char_type;$/;"	t	struct:char_traits	access:public
int_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	t	struct:char_traits	access:public
pos_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	t	struct:char_traits	access:public
off_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	t	struct:char_traits	access:public
state_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	t	struct:char_traits	access:public
assign	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:char_traits	access:public	signature:(char_type& __c1, const char_type& __c2)
eq	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
lt	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:char_traits	access:public	signature:(const char_type& __c1, const char_type& __c2)
compare	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:char_traits	access:public	signature:(const char_type* __s1, const char_type* __s2, std::size_t __n)
length	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      length(const char_type* __s);$/;"	p	struct:char_traits	access:public	signature:(const char_type* __s)
find	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:char_traits	access:public	signature:(const char_type* __s, std::size_t __n, const char_type& __a)
move	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, std::size_t __n)
copy	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:char_traits	access:public	signature:(char_type* __s1, const char_type* __s2, std::size_t __n)
assign	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:char_traits	access:public	signature:(char_type* __s, std::size_t __n, char_type __a)
to_char_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      to_char_type(const int_type& __c)$/;"	f	struct:char_traits	access:public	signature:(const int_type& __c)
to_int_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      to_int_type(const char_type& __c)$/;"	f	struct:char_traits	access:public	signature:(const char_type& __c)
eq_int_type	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:char_traits	access:public	signature:(const int_type& __c1, const int_type& __c2)
eof	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      eof()$/;"	f	struct:char_traits	access:public	signature:()
not_eof	/home/alan/.vim/tags/cpp_src/char_traits.h	/^      not_eof(const int_type& __c)$/;"	f	struct:char_traits	access:public	signature:(const int_type& __c)
compare	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:char_traits	signature:(const char_type* __s1, const char_type* __s2, std::size_t __n)
length	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    length(const char_type* __p)$/;"	f	class:char_traits	signature:(const char_type* __p)
find	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:char_traits	signature:(const char_type* __s, std::size_t __n, const char_type& __a)
move	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:char_traits	signature:(char_type* __s1, const char_type* __s2, std::size_t __n)
copy	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:char_traits	signature:(char_type* __s1, const char_type* __s2, std::size_t __n)
assign	/home/alan/.vim/tags/cpp_src/char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:char_traits	signature:(char_type* __s, std::size_t __n, char_type __a)
_FUNCTEXCEPT_H	/home/alan/.vim/tags/cpp_src/functexcept.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/functexcept.h	/^namespace std {$/;"	n
__throw_bad_exception	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(void)
__throw_bad_alloc	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(void)
__throw_bad_cast	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(void)
__throw_bad_typeid	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(void)
__throw_logic_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_domain_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_invalid_argument	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_length_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_out_of_range	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_runtime_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_range_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_overflow_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_underflow_error	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
__throw_ios_failure	/home/alan/.vim/tags/cpp_src/functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	signature:(const char*)
_TREE_H	/home/alan/.vim/tags/cpp_src/stl_tree.h	65;"	d
std	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^namespace std {$/;"	n
_Rb_tree_color	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	g	namespace:std
_S_red	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
_S_black	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
_Rb_tree_node_base	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  struct _Rb_tree_node_base$/;"	s	namespace:std
_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_Const_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_M_color	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _Rb_tree_color	_M_color;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_parent	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _Base_ptr		_M_parent;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_left	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _Base_ptr		_M_left;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_right	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _Base_ptr		_M_right;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_S_minimum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _S_minimum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_minimum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _S_minimum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
_S_maximum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _S_maximum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_maximum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _S_maximum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
_Rb_tree_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	namespace:std	inherits:_Rb_tree_node_base
_Link_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node<_Val>* _Link_type;$/;"	t	struct:std::_Rb_tree_node	access:public
_M_value_field	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Val _M_value_field;$/;"	m	struct:std::_Rb_tree_node	access:public
_Rb_tree_increment	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_increment(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
_Rb_tree_increment	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_increment(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
_Rb_tree_decrement	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_decrement(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
_Rb_tree_decrement	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_decrement(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
_Rb_tree_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    struct _Rb_tree_iterator$/;"	s	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Tp  value_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Tp& reference;$/;"	t	struct:std::_Rb_tree_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::_Rb_tree_iterator	access:public
iterator_category	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Self	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Link_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Rb_tree_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_iterator()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator ==	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
operator !=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
_M_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_iterator	access:public
_Rb_tree_const_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    struct _Rb_tree_const_iterator$/;"	s	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const _Tp& reference;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const _Tp* pointer;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp> iterator;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
iterator_category	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Self	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_const_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Link_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Rb_tree_const_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_const_iterator()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
_Rb_tree_const_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_const_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_const_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_const_iterator(const iterator& __it)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const iterator& __it)
operator *	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
operator ==	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
operator !=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
_M_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_const_iterator	access:public
operator ==	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator==(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator!=(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
_Rb_tree_rotate_left	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
_Rb_tree_rotate_right	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
_Rb_tree_insert_and_rebalance	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_insert_and_rebalance(const bool __insert_left,$/;"	p	namespace:std	signature:(const bool __insert_left, _Rb_tree_node_base* __x, _Rb_tree_node_base* __p, _Rb_tree_node_base& __header)
_Rb_tree_rebalance_for_erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __z, _Rb_tree_node_base& __header)
_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    class _Rb_tree$/;"	c	namespace:std
_Node_allocator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^              _Node_allocator;$/;"	t	class:std::_Rb_tree	access:private
_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
_Const_Base_ptr	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
_Rb_tree_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node<_Val> _Rb_tree_node;$/;"	t	class:std::_Rb_tree	access:protected
key_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Key key_type;$/;"	t	class:std::_Rb_tree	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Val value_type;$/;"	t	class:std::_Rb_tree	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Rb_tree	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const value_type* const_pointer;$/;"	t	class:std::_Rb_tree	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef value_type& reference;$/;"	t	class:std::_Rb_tree	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const value_type& const_reference;$/;"	t	class:std::_Rb_tree	access:public
_Link_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_node* _Link_type;$/;"	t	class:std::_Rb_tree	access:public
_Const_Link_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef const _Rb_tree_node* _Const_Link_type;$/;"	t	class:std::_Rb_tree	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef size_t size_type;$/;"	t	class:std::_Rb_tree	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef ptrdiff_t difference_type;$/;"	t	class:std::_Rb_tree	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_Rb_tree	access:public
_M_get_Node_allocator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_Rb_tree	access:public	signature:()
_M_get_Node_allocator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      get_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
_M_get_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_get_node()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_put_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_put_node(_Rb_tree_node* __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Rb_tree_node* __p)
_M_create_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(const value_type& __x)
_M_clone_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_clone_node(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_M_destroy_node	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_destroy_node(_Link_type __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __p)
_Rb_tree_impl	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^        struct _Rb_tree_impl : public _Node_allocator$/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_M_key_compare	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Key_compare		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_header	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_node_count	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_Rb_tree_impl	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	f	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator& __a = _Node_allocator(), const _Key_compare& __comp = _Key_compare())
_Rb_tree_impl	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^        struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator $/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_M_key_compare	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Key_compare 		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_header	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_node_count	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_Rb_tree_impl	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	f	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator& __a = _Node_allocator(), const _Key_compare& __comp = _Key_compare())
_M_impl	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree_impl<_Compare> _M_impl;$/;"	m	class:std::_Rb_tree	access:protected
_M_root	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_root()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_root	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_root() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_leftmost	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_leftmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_leftmost	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_leftmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_rightmost	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_rightmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_rightmost	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_rightmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_begin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_begin()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_begin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_begin() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_end	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_end()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_end	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_end() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_S_value	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_value(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_S_key	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_key(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_S_left	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_left(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_left	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_left(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_right	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_right(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_right	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_right(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_value	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_value(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_key	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_key(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_minimum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_minimum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_minimum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_minimum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_maximum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_maximum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_maximum	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _S_maximum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_iterator<value_type>       iterator;$/;"	t	class:std::_Rb_tree	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef _Rb_tree_const_iterator<value_type> const_iterator;$/;"	t	class:std::_Rb_tree	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
_M_insert	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert_lower	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Base_ptr __x, _Const_Base_ptr __y, const value_type& __v)
_M_copy	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_copy(_Const_Link_type __x, _Link_type __p);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Link_type __x, _Link_type __p)
_M_erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_erase(_Link_type __x);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x)
_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree(const _Compare& __comp)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp)
_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
~_Rb_tree	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      ~_Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
key_comp	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      key_comp() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      begin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      begin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      end()$/;"	f	class:std::_Rb_tree	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      end() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      rbegin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      rbegin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      rend()$/;"	f	class:std::_Rb_tree	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      rend() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      empty() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      max_size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
swap	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);$/;"	p	class:std::_Rb_tree	access:public	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_unique(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_equal(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_equal_lower	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_equal_lower(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_unique(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_unique(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_equal(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_equal(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^        _M_insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^        _M_insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(const_iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __first, iterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      erase(const key_type* __first, const key_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
clear	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      clear()$/;"	f	class:std::_Rb_tree	access:public	signature:()
find	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      find(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
find	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      find(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
count	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      count(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      lower_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      lower_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      upper_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      upper_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      equal_range(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
equal_range	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      equal_range(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
__rb_verify	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      __rb_verify() const;$/;"	p	class:std::_Rb_tree	access:public	signature:() const
operator ==	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator =	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
_M_insert	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
_M_insert_lower	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
_M_insert	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_equal(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
_M_insert_equal_lower	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_equal_lower(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
swap	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)$/;"	f	class:std::_Rb_tree	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_unique(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_unique(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_unique(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_equal(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_insert_equal(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
_M_insert_equal	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_equal(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
_M_insert_unique	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^      _M_insert_unique(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(iterator __position)$/;"	f	class:std::_Rb_tree	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(const_iterator __position)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(const _Key& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __x)
_M_copy	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_copy(_Const_Link_type __x, _Link_type __p)$/;"	f	class:std::_Rb_tree	signature:(_Const_Link_type __x, _Link_type __p)
_M_erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _M_erase(_Link_type __x)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::_Rb_tree	signature:(iterator __first, iterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    erase(const _Key* __first, const _Key* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Key* __first, const _Key* __last)
find	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    find(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
find	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    find(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
count	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    count(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    lower_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    lower_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    upper_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    upper_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    equal_range(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
equal_range	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    equal_range(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
_Rb_tree_black_count	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^  _Rb_tree_black_count(const _Rb_tree_node_base* __node,$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __node, const _Rb_tree_node_base* __root)
__rb_verify	/home/alan/.vim/tags/cpp_src/stl_tree.h	/^    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:std::_Rb_tree	signature:() const
_STACK_H	/home/alan/.vim/tags/cpp_src/stl_stack.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^namespace std {$/;"	n
stack	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    class stack$/;"	c	namespace:std
_Sequence_value_type	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::stack	access:private
operator ==	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^        operator==(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^        operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
value_type	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::stack	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::stack	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::stack	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::stack	access:public
container_type	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::stack	access:public
c	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      _Sequence c;$/;"	m	class:std::stack	access:protected
stack	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      stack(const _Sequence& __c = _Sequence())$/;"	f	class:std::stack	access:public	signature:(const _Sequence& __c = _Sequence())
empty	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      empty() const$/;"	f	class:std::stack	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      size() const$/;"	f	class:std::stack	access:public	signature:() const
top	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      top()$/;"	f	class:std::stack	access:public	signature:()
top	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      top() const$/;"	f	class:std::stack	access:public	signature:() const
push	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      push(const value_type& __x)$/;"	f	class:std::stack	access:public	signature:(const value_type& __x)
pop	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^      pop()$/;"	f	class:std::stack	access:public	signature:()
operator ==	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_stack.h	/^    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
_ITERATOR_BASE_TYPES_H	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	65;"	d
std	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^namespace std {$/;"	n
input_iterator_tag	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^  struct input_iterator_tag {};$/;"	s	namespace:std
output_iterator_tag	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^  struct output_iterator_tag {};$/;"	s	namespace:std
forward_iterator_tag	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	namespace:std	inherits:input_iterator_tag
bidirectional_iterator_tag	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	namespace:std	inherits:forward_iterator_tag
random_access_iterator_tag	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
iterator	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^    struct iterator$/;"	s	namespace:std
iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	access:public
iterator_traits	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	access:public
iterator_traits	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	access:public
iterator_traits	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	access:public
__iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
_STREAMBUF_ITERATOR_H	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	37;"	d
std	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^namespace std {$/;"	n
istreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator
char_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	t	class:std::istreambuf_iterator	access:public
traits_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::istreambuf_iterator	access:public
int_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	t	class:std::istreambuf_iterator	access:public
streambuf_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	t	class:std::istreambuf_iterator	access:public
istream_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	t	class:std::istreambuf_iterator	access:public
copy	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^	copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	access:friend	signature:(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, ostreambuf_iterator<_CharT2>)
__copy_aux	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^	__copy_aux(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	access:friend	signature:(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, _CharT2*)
find	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^	find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::istreambuf_iterator	access:friend	signature:(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, const _CharT2&)
_M_sbuf	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	m	class:std::istreambuf_iterator	access:private
_M_c	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      mutable int_type		_M_c;$/;"	m	class:std::istreambuf_iterator	access:private
istreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      istreambuf_iterator() throw()$/;"	f	class:std::istreambuf_iterator	access:public	signature:()
istreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) throw()$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type& __s)
istreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) throw()$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type* __s)
operator *	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator*() const$/;"	f	class:std::istreambuf_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::istreambuf_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator	access:public	signature:(int)
equal	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator& __b) const
_M_get	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	access:private	signature:() const
_M_at_eof	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	access:private	signature:() const
operator ==	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b)
operator !=	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __a, const istreambuf_iterator<_CharT, _Traits>& __b)
ostreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator
char_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef _CharT                           char_type;$/;"	t	class:std::ostreambuf_iterator	access:public
traits_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef _Traits                          traits_type;$/;"	t	class:std::ostreambuf_iterator	access:public
streambuf_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	access:public
ostream_type	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	access:public
copy	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^	copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,$/;"	p	class:std::ostreambuf_iterator	access:friend	signature:(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, ostreambuf_iterator<_CharT2>)
_M_sbuf	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	m	class:std::ostreambuf_iterator	access:private
_M_failed	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      bool		_M_failed;$/;"	m	class:std::ostreambuf_iterator	access:private
ostreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) throw ()$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type& __s)
ostreambuf_iterator	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) throw ()$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type* __s)
operator =	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(_CharT __c)
operator *	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator*()$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(int)
operator ++	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
failed	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      failed() const throw()$/;"	f	class:std::ostreambuf_iterator	access:public	signature:() const
_M_put	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(const _CharT* __ws, streamsize __len)
copy	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	signature:(istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, ostreambuf_iterator<_CharT> __result)
__copy_aux	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    __copy_aux(_CharT* __first, _CharT* __last,$/;"	f	namespace:std	signature:(_CharT* __first, _CharT* __last, ostreambuf_iterator<_CharT> __result)
__copy_aux	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    __copy_aux(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std	signature:(const _CharT* __first, const _CharT* __last, ostreambuf_iterator<_CharT> __result)
__copy_aux	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    __copy_aux(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	signature:(istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, _CharT* __result)
find	/home/alan/.vim/tags/cpp_src/streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	signature:(istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, const _CharT& __val)
_MAP_H	/home/alan/.vim/tags/cpp_src/stl_map.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_map.h	/^namespace std {$/;"	n
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    class map$/;"	c	namespace:std
key_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::map	access:public
mapped_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::map	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::map	access:public
key_compare	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::map	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::map	access:public
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::map	access:private
value_compare	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      class value_compare$/;"	c	class:std::map	inherits:std::binary_function	access:public
comp	/home/alan/.vim/tags/cpp_src/stl_map.h	/^	_Compare comp;$/;"	m	class:std::map::value_compare	access:protected
value_compare	/home/alan/.vim/tags/cpp_src/stl_map.h	/^	value_compare(_Compare __c)$/;"	f	class:std::map::value_compare	access:protected	signature:(_Compare __c)
operator ()	/home/alan/.vim/tags/cpp_src/stl_map.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
_Pair_alloc_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        _Pair_alloc_type;$/;"	t	class:std::map	access:private
_Rep_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::map	access:private
_M_t	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      _Rep_type _M_t;$/;"	m	class:std::map	access:private
pointer	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::map	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::map	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::map	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::map	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::map	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::map	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::map	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::map	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::map	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::map	access:public
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      map()$/;"	f	class:std::map	access:public	signature:()
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      map(const _Compare& __comp, const allocator_type& __a = allocator_type())$/;"	f	class:std::map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      map(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
operator =	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      operator=(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
get_allocator	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      get_allocator() const$/;"	f	class:std::map	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      begin()$/;"	f	class:std::map	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      begin() const$/;"	f	class:std::map	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      end()$/;"	f	class:std::map	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      end() const$/;"	f	class:std::map	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      rbegin()$/;"	f	class:std::map	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      rbegin() const$/;"	f	class:std::map	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      rend()$/;"	f	class:std::map	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      rend() const$/;"	f	class:std::map	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      empty() const$/;"	f	class:std::map	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      size() const$/;"	f	class:std::map	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      max_size() const$/;"	f	class:std::map	access:public	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      operator[](const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
at	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      at(const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
at	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      at(const key_type& __k) const$/;"	f	class:std::map	access:public	signature:(const key_type& __k) const
insert	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      insert(const value_type& __x)$/;"	f	class:std::map	access:public	signature:(const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::map	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      erase(iterator __position)$/;"	f	class:std::map	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      erase(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
erase	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::map	access:public	signature:(iterator __first, iterator __last)
swap	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      swap(map& __x)$/;"	f	class:std::map	access:public	signature:(map& __x)
clear	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      clear()$/;"	f	class:std::map	access:public	signature:()
key_comp	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      key_comp() const$/;"	f	class:std::map	access:public	signature:() const
value_comp	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      value_comp() const$/;"	f	class:std::map	access:public	signature:() const
find	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      find(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
find	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      find(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
count	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      count(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
equal_range	/home/alan/.vim/tags/cpp_src/stl_map.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
operator ==	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_map.h	/^        operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator ==	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_map.h	/^    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(map<_Key, _Tp, _Compare, _Alloc>& __x, map<_Key, _Tp, _Compare, _Alloc>& __y)
_MASK_ARRAY_H	/home/alan/.vim/tags/cpp_src/mask_array.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/mask_array.h	/^namespace std {$/;"	n
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    class mask_array$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      typedef _Tp value_type;$/;"	t	class:std::mask_array	access:public
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      mask_array (const mask_array&);$/;"	p	class:std::mask_array	access:public	signature:(const mask_array&)
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      mask_array& operator=(const mask_array&);$/;"	p	class:std::mask_array	access:public	signature:(const mask_array&)
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const valarray<_Tp>&) const
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      void operator=(const _Tp&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Tp&) const
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator*=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator\/=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator%=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator+=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator-=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator^=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator&=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator|=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator<<=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/mask_array.h	/^        void operator>>=(const _Expr<_Dom,_Tp>&) const;$/;"	p	class:std::mask_array	access:public	signature:(const _Expr<_Dom,_Tp>&) const
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      mask_array(_Array<_Tp>, size_t, _Array<bool>);$/;"	p	class:std::mask_array	access:private	signature:(_Array<_Tp>, size_t, _Array<bool>)
_M_sz	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      const size_t       _M_sz;$/;"	m	class:std::mask_array	access:private
_M_mask	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      const _Array<bool> _M_mask;$/;"	m	class:std::mask_array	access:private
_M_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      const _Array<_Tp>  _M_array;$/;"	m	class:std::mask_array	access:private
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      mask_array();$/;"	p	class:std::mask_array	access:private	signature:()
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)$/;"	f	class:std::mask_array	signature:(const mask_array<_Tp>& a)
mask_array	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)$/;"	f	class:std::mask_array	signature:(_Array<_Tp> __a, size_t __s, _Array<bool> __m)
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    mask_array<_Tp>::operator=(const mask_array<_Tp>& __a)$/;"	f	class:std::mask_array	signature:(const mask_array<_Tp>& __a)
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    mask_array<_Tp>::operator=(const _Tp& __t) const$/;"	f	class:std::mask_array	signature:(const _Tp& __t) const
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^    mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	f	class:std::mask_array	signature:(const valarray<_Tp>& __v) const
operator =	/home/alan/.vim/tags/cpp_src/mask_array.h	/^      mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const$/;"	f	class:std::mask_array	signature:(const _Expr<_Ex, _Tp>& __e) const
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/mask_array.h	171;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/mask_array.h	172;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/mask_array.h	200;"	d
_VECTOR_H	/home/alan/.vim/tags/cpp_src/stl_vector.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^namespace std {$/;"	n
_Vector_base	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    struct _Vector_base$/;"	s	namespace:std
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	struct:std::_Vector_base	access:public
_Vector_impl	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      struct _Vector_impl $/;"	s	struct:std::_Vector_base	inherits:_Tp_alloc_type	access:public
_M_start	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^	_Tp*           _M_start;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_M_finish	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^	_Tp*           _M_finish;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_M_end_of_storage	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^	_Tp*           _M_end_of_storage;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_Vector_impl	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^	_Vector_impl(_Tp_alloc_type const& __a)$/;"	f	struct:std::_Vector_base::_Vector_impl	access:public	signature:(_Tp_alloc_type const& __a)
allocator_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Vector_base	access:public
_M_get_Tp_allocator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_get_Tp_allocator()$/;"	f	struct:std::_Vector_base	access:public	signature:()
_M_get_Tp_allocator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_get_Tp_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      get_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
_Vector_base	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _Vector_base(const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(const allocator_type& __a)
_Vector_base	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _Vector_base(size_t __n, const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
~_Vector_base	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      ~_Vector_base()$/;"	f	struct:std::_Vector_base	access:public	signature:()
_M_impl	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _Vector_impl _M_impl;$/;"	m	struct:std::_Vector_base	access:public
_M_allocate	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n)
_M_deallocate	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_deallocate(_Tp* __p, size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(_Tp* __p, size_t __n)
vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    class vector : protected _Vector_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Vector_base
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::vector	access:private
_Base	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef _Vector_base<_Tp, _Alloc>			 _Base;$/;"	t	class:std::vector	access:private
vector_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef vector<_Tp, _Alloc>			 vector_type;$/;"	t	class:std::vector	access:private
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::vector	access:private
value_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef _Tp					 value_type;$/;"	t	class:std::vector	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::vector	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::vector	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::vector	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::vector	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;$/;"	t	class:std::vector	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      const_iterator;$/;"	t	class:std::vector	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:std::vector	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef std::reverse_iterator<iterator>		 reverse_iterator;$/;"	t	class:std::vector	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef size_t					 size_type;$/;"	t	class:std::vector	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef ptrdiff_t					 difference_type;$/;"	t	class:std::vector	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      vector(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
~vector	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      ~vector()$/;"	f	class:std::vector	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      operator=(const vector& __x);$/;"	p	class:std::vector	access:public	signature:(const vector& __x)
assign	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __val)
assign	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
begin	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      begin()$/;"	f	class:std::vector	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      begin() const$/;"	f	class:std::vector	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      end()$/;"	f	class:std::vector	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      end() const$/;"	f	class:std::vector	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      rbegin()$/;"	f	class:std::vector	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      rend()$/;"	f	class:std::vector	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      rend() const$/;"	f	class:std::vector	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      size() const$/;"	f	class:std::vector	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      max_size() const$/;"	f	class:std::vector	access:public	signature:() const
resize	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, value_type __x = value_type())
capacity	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      capacity() const$/;"	f	class:std::vector	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      empty() const$/;"	f	class:std::vector	access:public	signature:() const
reserve	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      reserve(size_type __n);$/;"	p	class:std::vector	access:public	signature:(size_type __n)
operator []	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
operator []	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
_M_range_check	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
at	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
at	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
front	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      front()$/;"	f	class:std::vector	access:public	signature:()
front	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      front() const$/;"	f	class:std::vector	access:public	signature:() const
back	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      back()$/;"	f	class:std::vector	access:public	signature:()
back	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      back() const$/;"	f	class:std::vector	access:public	signature:() const
data	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      data()$/;"	f	class:std::vector	access:public	signature:()
data	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      data() const$/;"	f	class:std::vector	access:public	signature:() const
push_back	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      push_back(const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(const value_type& __x)
pop_back	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      pop_back()$/;"	f	class:std::vector	access:public	signature:()
insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      erase(iterator __position);$/;"	p	class:std::vector	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::vector	access:public	signature:(iterator __first, iterator __last)
swap	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      swap(vector& __x)$/;"	f	class:std::vector	access:public	signature:(vector& __x)
clear	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      clear()$/;"	f	class:std::vector	access:public	signature:()
_M_allocate_and_copy	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_allocate_and_copy(size_type __n,$/;"	f	class:std::vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __value, __true_type)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_range_initialize	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_range_initialize(_InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_initialize	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_fill_assign	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::vector	access:protected	signature:(size_type __n, const value_type& __val)
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_range_insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_range_insert(iterator __pos, _InputIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^        _M_range_insert(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_fill_insert	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_insert_aux(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __position, const value_type& __x)
_M_erase_at_end	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^      _M_erase_at_end(pointer __pos)$/;"	f	class:std::vector	access:protected	signature:(pointer __pos)
operator ==	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_vector.h	/^    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
_CONCEPT_CHECK_H	/home/alan/.vim/tags/cpp_src/concept_check.h	36;"	d
__glibcxx_function_requires	/home/alan/.vim/tags/cpp_src/concept_check.h	52;"	d
__glibcxx_class_requires	/home/alan/.vim/tags/cpp_src/concept_check.h	53;"	d
__glibcxx_class_requires2	/home/alan/.vim/tags/cpp_src/concept_check.h	54;"	d
__glibcxx_class_requires3	/home/alan/.vim/tags/cpp_src/concept_check.h	55;"	d
__glibcxx_class_requires4	/home/alan/.vim/tags/cpp_src/concept_check.h	56;"	d
__glibcxx_function_requires	/home/alan/.vim/tags/cpp_src/concept_check.h	72;"	d
__glibcxx_class_requires	/home/alan/.vim/tags/cpp_src/concept_check.h	74;"	d
__glibcxx_class_requires2	/home/alan/.vim/tags/cpp_src/concept_check.h	76;"	d
__glibcxx_class_requires3	/home/alan/.vim/tags/cpp_src/concept_check.h	78;"	d
__glibcxx_class_requires4	/home/alan/.vim/tags/cpp_src/concept_check.h	80;"	d
_VALARRAY_BEFORE_H	/home/alan/.vim/tags/cpp_src/valarray_before.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^namespace std {$/;"	n
__abs	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __abs$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__abs	access:public	signature:(const _Tp& __t) const
__cos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __cos$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__cos	access:public	signature:(const _Tp& __t) const
__acos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __acos$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__acos	access:public	signature:(const _Tp& __t) const
__cosh	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __cosh$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__cosh	access:public	signature:(const _Tp& __t) const
__sin	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __sin$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__sin	access:public	signature:(const _Tp& __t) const
__asin	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __asin$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__asin	access:public	signature:(const _Tp& __t) const
__sinh	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __sinh$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__sinh	access:public	signature:(const _Tp& __t) const
__tan	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __tan$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__tan	access:public	signature:(const _Tp& __t) const
__atan	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __atan$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__atan	access:public	signature:(const _Tp& __t) const
__tanh	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __tanh$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__tanh	access:public	signature:(const _Tp& __t) const
__exp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __exp$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__exp	access:public	signature:(const _Tp& __t) const
__log	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __log$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__log	access:public	signature:(const _Tp& __t) const
__log10	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __log10$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__log10	access:public	signature:(const _Tp& __t) const
__sqrt	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __sqrt$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__sqrt	access:public	signature:(const _Tp& __t) const
__unary_plus	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __unary_plus$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__unary_plus	access:public	signature:(const _Tp& __t) const
__negate	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __negate$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__negate	access:public	signature:(const _Tp& __t) const
__bitwise_not	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __bitwise_not$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	f	struct:std::__bitwise_not	access:public	signature:(const _Tp& __t) const
__plus	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __plus$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__minus	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __minus$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__multiplies	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __multiplies$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__divides	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __divides$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__modulus	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __modulus$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__bitwise_xor	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __bitwise_xor$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__bitwise_xor	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__bitwise_and	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __bitwise_and$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__bitwise_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__bitwise_or	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __bitwise_or$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__bitwise_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__shift_left	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __shift_left$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__shift_left	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__shift_right	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __shift_right$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__shift_right	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__logical_and	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __logical_and$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__logical_or	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __logical_or$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__logical_not	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __logical_not$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:std::__logical_not	access:public	signature:(const _Tp& __x) const
__equal_to	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __equal_to$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__not_equal_to	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __not_equal_to$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__less	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __less$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__greater	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __greater$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__less_equal	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __less_equal$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__greater_equal	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __greater_equal$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__atan2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __atan2$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__atan2	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__pow	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^  struct __pow$/;"	s	namespace:std
operator ()	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::__pow	access:public	signature:(const _Tp& __x, const _Tp& __y) const
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Tp result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__logical_not, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__logical_and, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__logical_or, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__less, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__greater, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__less_equal, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__greater_equal, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__equal_to, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
__fun	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct __fun<__not_equal_to, _Tp>$/;"	s	namespace:std
result_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef bool result_type;$/;"	t	struct:std::__fun	access:public
_FunBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _FunBase$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	t	class:std::_FunBase	access:public
_FunBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _FunBase(const _Dom& __e, value_type __f(_Arg))$/;"	f	class:std::_FunBase	access:public	signature:(const _Dom& __e, value_type __f(_Arg))
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	f	class:std::_FunBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size_t size() const { return _M_expr.size ();}$/;"	f	class:std::_FunBase	access:public	signature:() const
_M_expr	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Dom& _M_expr;$/;"	m	class:std::_FunBase	access:private
_M_func	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type (*_M_func)(_Arg);$/;"	m	class:std::_FunBase	access:private
_ValFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _ValFunClos<_Expr,_Dom> : _FunBase<_Dom, typename _Dom::value_type>$/;"	s	namespace:std	inherits:_FunBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _FunBase<_Dom, typename _Dom::value_type> _Base;$/;"	t	struct:std::_ValFunClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_ValFunClos	access:public
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef value_type _Tp;$/;"	t	struct:std::_ValFunClos	access:public
_ValFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _ValFunClos(const _Dom& __e, _Tp __f(_Tp)) : _Base(__e, __f) {}$/;"	f	struct:std::_ValFunClos	access:public	signature:(const _Dom& __e, _Tp __f(_Tp))
_ValFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _ValFunClos<_ValArray,_Tp> : _FunBase<valarray<_Tp>, _Tp>$/;"	s	namespace:std	inherits:_FunBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, _Tp> _Base;$/;"	t	struct:std::_ValFunClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Tp value_type;$/;"	t	struct:std::_ValFunClos	access:public
_ValFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _ValFunClos(const valarray<_Tp>& __v, _Tp __f(_Tp)) : _Base(__v, __f) {}$/;"	f	struct:std::_ValFunClos	access:public	signature:(const valarray<_Tp>& __v, _Tp __f(_Tp))
_RefFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _RefFunClos<_Expr, _Dom>$/;"	s	namespace:std	inherits:_FunBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _FunBase<_Dom, const typename _Dom::value_type&> _Base;$/;"	t	struct:std::_RefFunClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_RefFunClos	access:public
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef value_type _Tp;$/;"	t	struct:std::_RefFunClos	access:public
_RefFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _RefFunClos(const _Dom& __e, _Tp __f(const _Tp&))$/;"	f	struct:std::_RefFunClos	access:public	signature:(const _Dom& __e, _Tp __f(const _Tp&))
_RefFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _RefFunClos<_ValArray, _Tp>$/;"	s	namespace:std	inherits:_FunBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, const _Tp&> _Base;$/;"	t	struct:std::_RefFunClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Tp value_type;$/;"	t	struct:std::_RefFunClos	access:public
_RefFunClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _RefFunClos(const valarray<_Tp>& __v, _Tp __f(const _Tp&))$/;"	f	struct:std::_RefFunClos	access:public	signature:(const valarray<_Tp>& __v, _Tp __f(const _Tp&))
_UnBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _UnBase$/;"	c	namespace:std
_Vt	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Arg::value_type _Vt;$/;"	t	class:std::_UnBase	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	t	class:std::_UnBase	access:public
_UnBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _UnBase(const _Arg& __e) : _M_expr(__e) {}$/;"	f	class:std::_UnBase	access:public	signature:(const _Arg& __e)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	f	class:std::_UnBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size_t size() const { return _M_expr.size(); }$/;"	f	class:std::_UnBase	access:public	signature:() const
_M_expr	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Arg& _M_expr;$/;"	m	class:std::_UnBase	access:private
_UnClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _UnClos<_Oper, _Expr, _Dom>$/;"	s	namespace:std	inherits:_UnBase
_Arg	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Dom _Arg;$/;"	t	struct:std::_UnClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _UnBase<_Oper, _Dom> _Base;$/;"	t	struct:std::_UnClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_UnClos	access:public
_UnClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _UnClos(const _Arg& __e) : _Base(__e) {}$/;"	f	struct:std::_UnClos	access:public	signature:(const _Arg& __e)
_UnClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _UnClos<_Oper, _ValArray, _Tp>$/;"	s	namespace:std	inherits:_UnBase
_Arg	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef valarray<_Tp> _Arg;$/;"	t	struct:std::_UnClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _UnBase<_Oper, valarray<_Tp> > _Base;$/;"	t	struct:std::_UnClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_UnClos	access:public
_UnClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _UnClos(const _Arg& __e) : _Base(__e) {}$/;"	f	struct:std::_UnClos	access:public	signature:(const _Arg& __e)
_BinBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _BinBase$/;"	c	namespace:std
_Vt	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _FirstArg::value_type _Vt;$/;"	t	class:std::_BinBase	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	t	class:std::_BinBase	access:public
_BinBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinBase(const _FirstArg& __e1, const _SecondArg& __e2)$/;"	f	class:std::_BinBase	access:public	signature:(const _FirstArg& __e1, const _SecondArg& __e2)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	f	class:std::_BinBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	f	class:std::_BinBase	access:public	signature:() const
_M_expr1	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _FirstArg& _M_expr1;$/;"	m	class:std::_BinBase	access:private
_M_expr2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _SecondArg& _M_expr2;$/;"	m	class:std::_BinBase	access:private
_BinBase2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _BinBase2$/;"	c	namespace:std
_Vt	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	t	class:std::_BinBase2	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	t	class:std::_BinBase2	access:public
_BinBase2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinBase2(const _Clos& __e, const _Vt& __t)$/;"	f	class:std::_BinBase2	access:public	signature:(const _Clos& __e, const _Vt& __t)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	f	class:std::_BinBase2	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	f	class:std::_BinBase2	access:public	signature:() const
_M_expr1	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Clos& _M_expr1;$/;"	m	class:std::_BinBase2	access:private
_M_expr2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Vt& _M_expr2;$/;"	m	class:std::_BinBase2	access:private
_BinBase1	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _BinBase1$/;"	c	namespace:std
_Vt	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	t	class:std::_BinBase1	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	t	class:std::_BinBase1	access:public
_BinBase1	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinBase1(const _Vt& __t, const _Clos& __e)$/;"	f	class:std::_BinBase1	access:public	signature:(const _Vt& __t, const _Clos& __e)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	f	class:std::_BinBase1	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size_t size() const { return _M_expr2.size(); }$/;"	f	class:std::_BinBase1	access:public	signature:() const
_M_expr1	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Vt& _M_expr1;$/;"	m	class:std::_BinBase1	access:private
_M_expr2	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Clos& _M_expr2;$/;"	m	class:std::_BinBase1	access:private
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Expr, _Dom1, _Dom2>$/;"	s	namespace:std	inherits:_BinBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase<_Oper, _Dom1, _Dom2> _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const _Dom1& __e1, const _Dom2& __e2) : _Base(__e1, __e2) {}$/;"	f	struct:std::_BinClos	access:public	signature:(const _Dom1& __e1, const _Dom2& __e2)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper,_ValArray, _ValArray, _Tp, _Tp>$/;"	s	namespace:std	inherits:_BinBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, valarray<_Tp> > _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const valarray<_Tp>& __w)$/;"	f	struct:std::_BinClos	access:public	signature:(const valarray<_Tp>& __v, const valarray<_Tp>& __w)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _ValArray, _Dom, typename _Dom::value_type>$/;"	s	namespace:std	inherits:_BinBase
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	t	struct:std::_BinClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase<_Oper,_Dom,valarray<_Tp> > _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const _Dom& __e1, const valarray<_Tp>& __e2)$/;"	f	struct:std::_BinClos	access:public	signature:(const _Dom& __e1, const valarray<_Tp>& __e2)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Expr, typename _Dom::value_type, _Dom>$/;"	s	namespace:std	inherits:_BinBase
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	t	struct:std::_BinClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, _Dom> _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const valarray<_Tp>& __e1, const _Dom& __e2)$/;"	f	struct:std::_BinClos	access:public	signature:(const valarray<_Tp>& __e1, const _Dom& __e2)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Constant, _Dom, typename _Dom::value_type>$/;"	s	namespace:std	inherits:_BinBase2
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	t	struct:std::_BinClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase2<_Oper,_Dom> _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const _Dom& __e1, const _Tp& __e2) : _Base(__e1, __e2) {}$/;"	f	struct:std::_BinClos	access:public	signature:(const _Dom& __e1, const _Tp& __e2)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _Expr, typename _Dom::value_type, _Dom>$/;"	s	namespace:std	inherits:_BinBase1
_Tp	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	t	struct:std::_BinClos	access:public
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase1<_Oper, _Dom> _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const _Tp& __e1, const _Dom& __e2) : _Base(__e1, __e2) {}$/;"	f	struct:std::_BinClos	access:public	signature:(const _Tp& __e1, const _Dom& __e2)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Constant, _Tp, _Tp>$/;"	s	namespace:std	inherits:_BinBase2
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase2<_Oper,valarray<_Tp> > _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const _Tp& __t) : _Base(__v, __t) {}$/;"	f	struct:std::_BinClos	access:public	signature:(const valarray<_Tp>& __v, const _Tp& __t)
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _ValArray, _Tp, _Tp>$/;"	s	namespace:std	inherits:_BinBase1
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _BinBase1<_Oper, valarray<_Tp> > _Base;$/;"	t	struct:std::_BinClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_BinClos	access:public
_BinClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _BinClos(const _Tp& __t, const valarray<_Tp>& __v) : _Base(__t, __v) {}$/;"	f	struct:std::_BinClos	access:public	signature:(const _Tp& __t, const valarray<_Tp>& __v)
_SBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _SBase$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	t	class:std::_SBase	access:public
_SBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _SBase (const _Dom& __e, const slice& __s)$/;"	f	class:std::_SBase	access:public	signature:(const _Dom& __e, const slice& __s)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      operator[] (size_t __i) const$/;"	f	class:std::_SBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size() const$/;"	f	class:std::_SBase	access:public	signature:() const
_M_expr	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Dom& _M_expr;$/;"	m	class:std::_SBase	access:private
_M_slice	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const slice& _M_slice;$/;"	m	class:std::_SBase	access:private
_SBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    class _SBase<_Array<_Tp> >$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Tp value_type;$/;"	t	class:std::_SBase	access:public
_SBase	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _SBase (_Array<_Tp> __a, const slice& __s)$/;"	f	class:std::_SBase	access:public	signature:(_Array<_Tp> __a, const slice& __s)
operator []	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      operator[] (size_t __i) const$/;"	f	class:std::_SBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      size() const$/;"	f	class:std::_SBase	access:public	signature:() const
_M_array	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const _Array<_Tp> _M_array;$/;"	m	class:std::_SBase	access:private
_M_size	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const size_t _M_size;$/;"	m	class:std::_SBase	access:private
_M_stride	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      const size_t _M_stride;$/;"	m	class:std::_SBase	access:private
_SClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _SClos<_Expr, _Dom>$/;"	s	namespace:std	inherits:_SBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _SBase<_Dom> _Base;$/;"	t	struct:std::_SClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_SClos	access:public
_SClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _SClos (const _Dom& __e, const slice& __s) : _Base (__e, __s) {}$/;"	f	struct:std::_SClos	access:public	signature:(const _Dom& __e, const slice& __s)
_SClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^    struct _SClos<_ValArray, _Tp>$/;"	s	namespace:std	inherits:_SBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef  _SBase<_Array<_Tp> > _Base;$/;"	t	struct:std::_SClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      typedef _Tp value_type;$/;"	t	struct:std::_SClos	access:public
_SClos	/home/alan/.vim/tags/cpp_src/valarray_before.h	/^      _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}$/;"	f	struct:std::_SClos	access:public	signature:(_Array<_Tp> __a, const slice& __s)
_VALARRAY_ARRAY_H	/home/alan/.vim/tags/cpp_src/valarray_array.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^namespace std {$/;"	n
__valarray_get_memory	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^  __valarray_get_memory(size_t __n)$/;"	f	namespace:std	signature:(size_t __n)
__valarray_get_storage	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_get_storage(size_t __n)$/;"	f	namespace:std	signature:(size_t __n)
__valarray_release_memory	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^  __valarray_release_memory(void* __p)$/;"	f	namespace:std	signature:(void* __p)
_Array_default_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_default_ctor$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	f	struct:std::_Array_default_ctor	access:public	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e)
_Array_default_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_default_ctor<_Tp, true>$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	f	struct:std::_Array_default_ctor	access:public	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e)
__valarray_default_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_default_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	f	namespace:std	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e)
_Array_init_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_init_ctor$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)$/;"	f	struct:std::_Array_init_ctor	access:public	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)
_Array_init_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_init_ctor<_Tp, true>$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e,  const _Tp __t)$/;"	f	struct:std::_Array_init_ctor	access:public	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)
__valarray_fill_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e,$/;"	f	namespace:std	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)
_Array_copy_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_copy_ctor$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,$/;"	f	struct:std::_Array_copy_ctor	access:public	signature:(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e, _Tp* __restrict__ __o)
_Array_copy_ctor	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_copy_ctor<_Tp, true>$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,$/;"	f	struct:std::_Array_copy_ctor	access:public	signature:(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e, _Tp* __restrict__ __o)
__valarray_copy_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy_construct(const _Tp* __restrict__ __b,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e, _Tp* __restrict__ __o)
__valarray_copy_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a, size_t __n,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, size_t __n, size_t __s, _Tp* __restrict__ __o)
__valarray_copy_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, const size_t* __restrict__ __i, _Tp* __restrict__ __o, size_t __n)
__valarray_destroy_elements	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_destroy_elements(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	f	namespace:std	signature:(_Tp* __restrict__ __b, _Tp* __restrict__ __e)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n, const _Tp& __t)$/;"	f	namespace:std	signature:(_Tp* __restrict__ __a, size_t __n, const _Tp& __t)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n,$/;"	f	namespace:std	signature:(_Tp* __restrict__ __a, size_t __n, size_t __s, const _Tp& __t)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, const size_t* __restrict__ __i,$/;"	f	namespace:std	signature:(_Tp* __restrict__ __a, const size_t* __restrict__ __i, size_t __n, const _Tp& __t)
_Array_copier	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_copier$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)$/;"	f	struct:std::_Array_copier	access:public	signature:(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)
_Array_copier	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array_copier<_Tp, true>$/;"	s	namespace:std
_S_do_it	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)$/;"	f	struct:std::_Array_copier	access:public	signature:(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n, size_t __s,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, size_t __n, size_t __s, _Tp* __restrict__ __b)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, _Tp* __restrict__ __b,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, _Tp* __restrict__ __b, size_t __n, size_t __s)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n, size_t __s1,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __src, size_t __n, size_t __s1, _Tp* __restrict__ __dst, size_t __s2)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, const size_t* __restrict__ __i, _Tp* __restrict__ __b, size_t __n)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b, const size_t* __restrict__ __i)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __src, size_t __n, const size_t* __restrict__ __i, _Tp* __restrict__ __dst, const size_t* __restrict__ __j)
__valarray_sum	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_sum(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)
__valarray_product	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_product(const _Tp* __restrict__ __f,$/;"	f	namespace:std	signature:(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)
__valarray_min	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_min(const _Ta& __a)$/;"	f	namespace:std	signature:(const _Ta& __a)
__valarray_max	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_max(const _Ta& __a)$/;"	f	namespace:std	signature:(const _Ta& __a)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    struct _Array$/;"	s	namespace:std
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      explicit _Array(size_t);$/;"	p	struct:std::_Array	access:public	signature:(size_t)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      explicit _Array(_Tp* const __restrict__);$/;"	p	struct:std::_Array	access:public	signature:(_Tp* const __restrict__)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      explicit _Array(const valarray<_Tp>&);$/;"	p	struct:std::_Array	access:public	signature:(const valarray<_Tp>&)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _Array(const _Tp* __restrict__, size_t);$/;"	p	struct:std::_Array	access:public	signature:(const _Tp* __restrict__, size_t)
begin	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _Tp* begin() const;$/;"	p	struct:std::_Array	access:public	signature:() const
_M_data	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^      _Tp* const __restrict__ _M_data;$/;"	m	struct:std::_Array	access:public
__valarray_copy_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, _Array<size_t> __i,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, _Array<size_t> __i, _Array<_Tp> __b, size_t __n)
__valarray_copy_construct	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, size_t __n, size_t __s,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill (_Array<_Tp> __a, size_t __n, const _Tp& __t)$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, const _Tp& __t)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, size_t __n, size_t __s, const _Tp& __t)$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, size_t __s, const _Tp& __t)
__valarray_fill	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, _Array<size_t> __i,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, _Array<size_t> __i, size_t __n, const _Tp& __t)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b)$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<_Tp> __b, size_t __n, size_t __s)$/;"	f	namespace:std	signature:(_Array<_Tp> __a, _Array<_Tp> __b, size_t __n, size_t __s)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s1,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, size_t __s1, _Array<_Tp> __b, size_t __s2)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<size_t> __i,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, _Array<size_t> __i, _Array<_Tp> __b, size_t __n)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b,$/;"	f	namespace:std	signature:(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b, _Array<size_t> __i)
__valarray_copy	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    __valarray_copy(_Array<_Tp> __src, size_t __n, _Array<size_t> __i,$/;"	f	namespace:std	signature:(_Array<_Tp> __src, size_t __n, _Array<size_t> __i, _Array<_Tp> __dst, _Array<size_t> __j)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    _Array<_Tp>::_Array(size_t __n)$/;"	f	class:std::_Array	signature:(size_t __n)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    _Array<_Tp>::_Array(_Tp* const __restrict__ __p)$/;"	f	class:std::_Array	signature:(_Tp* const __restrict__ __p)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    _Array<_Tp>::_Array(const valarray<_Tp>& __v)$/;"	f	class:std::_Array	signature:(const valarray<_Tp>& __v)
_Array	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    _Array<_Tp>::_Array(const _Tp* __restrict__ __b, size_t __s)$/;"	f	class:std::_Array	signature:(const _Tp* __restrict__ __b, size_t __s)
begin	/home/alan/.vim/tags/cpp_src/valarray_array.h	/^    _Array<_Tp>::begin () const$/;"	f	class:std::_Array	signature:() const
_DEFINE_ARRAY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_array.h	537;"	d
_DEFINE_ARRAY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_array.h	696;"	d
_BVECTOR_H	/home/alan/.vim/tags/cpp_src/stl_bvector.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^namespace std {$/;"	n
_Bit_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  typedef unsigned long _Bit_type;$/;"	t	namespace:std
_S_word_bit	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	e	enum:std::__anon8
_Bit_reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  struct _Bit_reference$/;"	s	namespace:std
_M_p	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_reference	access:public
_M_mask	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_type _M_mask;$/;"	m	struct:std::_Bit_reference	access:public
_Bit_reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_reference(_Bit_type * __x, _Bit_type __y)$/;"	f	struct:std::_Bit_reference	access:public	signature:(_Bit_type * __x, _Bit_type __y)
_Bit_reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_reference() : _M_p(0), _M_mask(0) { }$/;"	f	struct:std::_Bit_reference	access:public	signature:()
operator bool	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator bool() const$/;"	f	struct:std::_Bit_reference	access:public	signature:() const
operator =	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator=(bool __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(bool __x)
operator =	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator=(const _Bit_reference& __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x)
operator ==	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator==(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator <	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator<(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
flip	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    flip()$/;"	f	struct:std::_Bit_reference	access:public	signature:()
_Bit_iterator_base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  struct _Bit_iterator_base$/;"	s	namespace:std	inherits:std::iterator
_M_p	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_iterator_base	access:public
_M_offset	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    unsigned int _M_offset;$/;"	m	struct:std::_Bit_iterator_base	access:public
_Bit_iterator_base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(_Bit_type * __x, unsigned int __y)
_M_bump_up	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_bump_up()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_bump_down	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_bump_down()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_incr	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_incr(ptrdiff_t __i)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
operator ==	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator==(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator<(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator !=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator!=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator>(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator<=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator>=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator -	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)$/;"	f	namespace:std	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
_Bit_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  struct _Bit_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_reference  reference;$/;"	t	struct:std::_Bit_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_reference* pointer;$/;"	t	struct:std::_Bit_iterator	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_iterator   iterator;$/;"	t	struct:std::_Bit_iterator	access:public
_Bit_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
_Bit_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
operator *	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator +=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator -=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator +	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator -	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator []	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator +	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
_Bit_const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef bool                 reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef bool                 const_reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef const bool*          pointer;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:std::_Bit_const_iterator	access:public
_Bit_const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
_Bit_const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _Bit_const_iterator(const _Bit_iterator& __x)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator +=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator -=	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator +	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator -	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator []	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator +	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
__fill_bvector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, bool __x)
fill	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
_Bvector_base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    struct _Bvector_base$/;"	s	namespace:std
_Bit_alloc_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^        _Bit_alloc_type;$/;"	t	struct:std::_Bvector_base	access:public
_Bvector_impl	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      struct _Bvector_impl$/;"	s	struct:std::_Bvector_base	inherits:_Bit_alloc_type	access:public
_M_start	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^	_Bit_iterator 	_M_start;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_M_finish	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^	_Bit_iterator 	_M_finish;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_M_end_of_storage	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^	_Bit_type* 	_M_end_of_storage;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_Bvector_impl	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^	_Bvector_impl(const _Bit_alloc_type& __a)$/;"	f	struct:std::_Bvector_base::_Bvector_impl	access:public	signature:(const _Bit_alloc_type& __a)
allocator_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Bvector_base	access:public
_M_get_Bit_allocator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_get_Bit_allocator()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
_M_get_Bit_allocator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_get_Bit_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      get_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
_Bvector_base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }$/;"	f	struct:std::_Bvector_base	access:public	signature:(const allocator_type& __a)
~_Bvector_base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      ~_Bvector_base()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
_M_impl	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _Bvector_impl _M_impl;$/;"	m	struct:std::_Bvector_base	access:protected
_M_allocate	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Bvector_base	access:protected	signature:(size_t __n)
_M_deallocate	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_deallocate()$/;"	f	struct:std::_Bvector_base	access:protected	signature:()
std	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^namespace std {$/;"	n
vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	c	namespace:std	inherits:_Bvector_base
_Base	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bvector_base<_Alloc>			 _Base;$/;"	t	class:std::vector	access:private
value_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef bool                                         value_type;$/;"	t	class:std::vector	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef size_t                                       size_type;$/;"	t	class:std::vector	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef ptrdiff_t                                    difference_type;$/;"	t	class:std::vector	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_reference                               reference;$/;"	t	class:std::vector	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef bool                                         const_reference;$/;"	t	class:std::vector	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_reference*                              pointer;$/;"	t	class:std::vector	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef const bool*                                  const_pointer;$/;"	t	class:std::vector	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_iterator                                iterator;$/;"	t	class:std::vector	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Bit_const_iterator                          const_iterator;$/;"	t	class:std::vector	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	t	class:std::vector	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef std::reverse_iterator<iterator>              reverse_iterator;$/;"	t	class:std::vector	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
get_allocator	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    allocator_type get_allocator() const$/;"	f	class:std::vector	access:public	signature:() const
vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    vector(size_type __n, const bool& __value = bool(), $/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __value = bool(), const allocator_type& __a = allocator_type())
vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
~vector	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    ~vector() { }$/;"	f	class:std::vector	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator=(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
assign	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    assign(size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __x)
assign	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
begin	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    begin()$/;"	f	class:std::vector	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    begin() const$/;"	f	class:std::vector	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    end()$/;"	f	class:std::vector	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    end() const$/;"	f	class:std::vector	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    rbegin()$/;"	f	class:std::vector	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    rend()$/;"	f	class:std::vector	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    rend() const$/;"	f	class:std::vector	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    size() const$/;"	f	class:std::vector	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    max_size() const$/;"	f	class:std::vector	access:public	signature:() const
capacity	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    capacity() const$/;"	f	class:std::vector	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    empty() const$/;"	f	class:std::vector	access:public	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
operator []	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
_M_range_check	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
at	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
at	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
reserve	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    reserve(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
front	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    front()$/;"	f	class:std::vector	access:public	signature:()
front	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    front() const$/;"	f	class:std::vector	access:public	signature:() const
back	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    back()$/;"	f	class:std::vector	access:public	signature:()
back	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    back() const$/;"	f	class:std::vector	access:public	signature:() const
data	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    data() { }$/;"	f	class:std::vector	access:public	signature:()
push_back	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    push_back(bool __x)$/;"	f	class:std::vector	access:public	signature:(bool __x)
swap	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    swap(vector<bool, _Alloc>& __x)$/;"	f	class:std::vector	access:public	signature:(vector<bool, _Alloc>& __x)
swap	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    swap(reference __x, reference __y)$/;"	f	class:std::vector	access:public	signature:(reference __x, reference __y)
insert	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    insert(iterator __position, const bool& __x = bool())$/;"	f	class:std::vector	access:public	signature:(iterator __position, const bool& __x = bool())
insert	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      insert(iterator __position,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    insert(iterator __position, size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const bool& __x)
pop_back	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    pop_back()$/;"	f	class:std::vector	access:public	signature:()
erase	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    erase(iterator __position)$/;"	f	class:std::vector	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::vector	access:public	signature:(iterator __first, iterator __last)
resize	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    resize(size_type __new_size, bool __x = bool())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, bool __x = bool())
flip	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    flip()$/;"	f	class:std::vector	access:public	signature:()
clear	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    clear()$/;"	f	class:std::vector	access:public	signature:()
_M_copy_aligned	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_copy_aligned(const_iterator __first, const_iterator __last,$/;"	f	class:std::vector	access:protected	signature:(const_iterator __first, const_iterator __last, iterator __result)
_M_initialize	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_initialize(size_type __n)$/;"	f	class:std::vector	access:protected	signature:(size_type __n)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_range	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_initialize_range	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_fill_assign	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_fill_assign(size_t __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(size_t __n, bool __x)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_aux	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_fill_insert	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_fill_insert(iterator __position, size_type __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, size_type __n, bool __x)
_M_insert_range	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_insert_range(iterator __pos, _InputIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_insert_range	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^      _M_insert_range(iterator __position, _ForwardIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_insert_aux	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_insert_aux(iterator __position, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, bool __x)
_M_erase_at_end	/home/alan/.vim/tags/cpp_src/stl_bvector.h	/^    _M_erase_at_end(iterator __pos)$/;"	f	class:std::vector	access:protected	signature:(iterator __pos)
_GSLICE_ARRAY_H	/home/alan/.vim/tags/cpp_src/gslice_array.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^namespace std {$/;"	n
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    class gslice_array$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      typedef _Tp value_type;$/;"	t	class:std::gslice_array	access:public
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      gslice_array(const gslice_array&);$/;"	p	class:std::gslice_array	access:public	signature:(const gslice_array&)
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      gslice_array& operator=(const gslice_array&);$/;"	p	class:std::gslice_array	access:public	signature:(const gslice_array&)
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const valarray<_Tp>&) const
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      void operator=(const _Tp&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Tp&) const
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator *=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator /=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator %=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator +=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator -=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator ^=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator &=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator |=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator <<=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
operator >>=	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^        void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	p	class:std::gslice_array	access:public	signature:(const _Expr<_Dom, _Tp>&) const
_M_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      _Array<_Tp>    _M_array;$/;"	m	class:std::gslice_array	access:private
_M_index	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      const valarray<size_t>& _M_index;$/;"	m	class:std::gslice_array	access:private
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      gslice_array(_Array<_Tp>, const valarray<size_t>&);$/;"	p	class:std::gslice_array	access:private	signature:(_Array<_Tp>, const valarray<size_t>&)
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      gslice_array();$/;"	p	class:std::gslice_array	access:private	signature:()
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    gslice_array<_Tp>::gslice_array(_Array<_Tp> __a,$/;"	f	class:std::gslice_array	signature:(_Array<_Tp> __a, const valarray<size_t>& __i)
gslice_array	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    gslice_array<_Tp>::gslice_array(const gslice_array<_Tp>& __a)$/;"	f	class:std::gslice_array	signature:(const gslice_array<_Tp>& __a)
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    gslice_array<_Tp>::operator=(const gslice_array<_Tp>& __a)$/;"	f	class:std::gslice_array	signature:(const gslice_array<_Tp>& __a)
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    gslice_array<_Tp>::operator=(const _Tp& __t) const$/;"	f	class:std::gslice_array	signature:(const _Tp& __t) const
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^    gslice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	f	class:std::gslice_array	signature:(const valarray<_Tp>& __v) const
operator =	/home/alan/.vim/tags/cpp_src/gslice_array.h	/^      gslice_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	f	class:std::gslice_array	signature:(const _Expr<_Dom, _Tp>& __e) const
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/gslice_array.h	180;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/gslice_array.h	181;"	d
_DEFINE_VALARRAY_OPERATOR	/home/alan/.vim/tags/cpp_src/gslice_array.h	210;"	d
_MULTISET_H	/home/alan/.vim/tags/cpp_src/stl_multiset.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^namespace std {$/;"	n
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    class multiset$/;"	c	namespace:std
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multiset	access:private
key_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef _Key     key_type;$/;"	t	class:std::multiset	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef _Key     value_type;$/;"	t	class:std::multiset	access:public
key_compare	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef _Compare key_compare;$/;"	t	class:std::multiset	access:public
value_compare	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef _Compare value_compare;$/;"	t	class:std::multiset	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::multiset	access:public
_Key_alloc_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::multiset	access:private
_Rep_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::multiset	access:private
_M_t	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      _Rep_type _M_t;$/;"	m	class:std::multiset	access:private
pointer	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::multiset	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::multiset	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::multiset	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::multiset	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::multiset	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::multiset	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::multiset	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::multiset	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::multiset	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::multiset	access:public
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      multiset()$/;"	f	class:std::multiset	access:public	signature:()
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      multiset(const _Compare& __comp,$/;"	f	class:std::multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      multiset(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
operator =	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      operator=(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
key_comp	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      key_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
value_comp	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      value_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      get_allocator() const$/;"	f	class:std::multiset	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      begin() const$/;"	f	class:std::multiset	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      end() const$/;"	f	class:std::multiset	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      rbegin() const$/;"	f	class:std::multiset	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      rend() const$/;"	f	class:std::multiset	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      empty() const$/;"	f	class:std::multiset	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      size() const$/;"	f	class:std::multiset	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      max_size() const$/;"	f	class:std::multiset	access:public	signature:() const
swap	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      swap(multiset<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(multiset<_Key, _Compare, _Alloc>& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      insert(const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      erase(iterator __position)$/;"	f	class:std::multiset	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      erase(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
erase	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multiset	access:public	signature:(iterator __first, iterator __last)
clear	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      clear()$/;"	f	class:std::multiset	access:public	signature:()
count	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      count(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
find	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      find(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
find	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      find(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
equal_range	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
operator ==	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^        operator== (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^        operator< (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
operator ==	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator==(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator<(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator>(const multiset<_Key,_Compare,_Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_multiset.h	/^    swap(multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multiset<_Key, _Compare, _Alloc>& __x, multiset<_Key, _Compare, _Alloc>& __y)
_STRINGFWD_H	/home/alan/.vim/tags/cpp_src/stringfwd.h	40;"	d
std	/home/alan/.vim/tags/cpp_src/stringfwd.h	/^namespace std {$/;"	n
string	/home/alan/.vim/tags/cpp_src/stringfwd.h	/^  typedef basic_string<char>    string;$/;"	t	namespace:std
wstring	/home/alan/.vim/tags/cpp_src/stringfwd.h	/^  typedef basic_string<wchar_t> wstring;$/;"	t	namespace:std
_ALGOBASE_H	/home/alan/.vim/tags/cpp_src/stl_algobase.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^namespace std {$/;"	n
swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	signature:(_Tp& __a, _Tp& __b)
__iter_swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
iter_swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	access:public	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
__iter_swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
iter_swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	access:public	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
iter_swap	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
min	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
max	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
min	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
max	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
__copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy$/;"	s	namespace:std
copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy	access:public	signature:(_II __first, _II __last, _OI __result)
__copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy	access:public	signature:(_II __first, _II __last, _OI __result)
__copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy<true, random_access_iterator_tag>$/;"	s	namespace:std
copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__copy_aux	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    __copy_aux(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	signature:(_II __first, _II __last, _OI __result)
__copy_aux	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(_CharT*, _CharT*, ostreambuf_iterator<_CharT>)
__copy_aux	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>)
__copy_aux	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT*)
__copy_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_normal$/;"	s	namespace:std
__copy_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
__copy_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_normal<true, false>$/;"	s	namespace:std
__copy_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
__copy_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_normal<false, true>$/;"	s	namespace:std
__copy_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
__copy_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_normal<true, true>$/;"	s	namespace:std
__copy_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
copy	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)
__copy_backward	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward$/;"	s	namespace:std
__copy_b	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
__copy_b	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward<true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_b	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__copy_backward_aux	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward_normal$/;"	s	namespace:std
__copy_b_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward_normal<true, false>$/;"	s	namespace:std
__copy_b_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward_normal<false, true>$/;"	s	namespace:std
__copy_b_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward_normal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __copy_backward_normal<true, true>$/;"	s	namespace:std
__copy_b_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
copy_backward	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __fill$/;"	s	namespace:std
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__fill	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
__fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __fill<true>$/;"	s	namespace:std
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__fill	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^  fill(signed char* __first, signed char* __last, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, signed char* __last, const signed char& __c)
fill	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^  fill(char* __first, char* __last, const char& __c)$/;"	f	namespace:std	signature:(char* __first, char* __last, const char& __c)
__fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __fill_n$/;"	s	namespace:std
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	struct:std::__fill_n	access:public	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
__fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    struct __fill_n<true>$/;"	s	namespace:std
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	struct:std::__fill_n	access:public	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    fill_n(signed char* __first, _Size __n, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, _Size __n, const signed char& __c)
fill_n	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    fill_n(char* __first, _Size __n, const char& __c)$/;"	f	namespace:std	signature:(char* __first, _Size __n, const char& __c)
mismatch	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
mismatch	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
equal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
equal	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
lexicographical_compare	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
lexicographical_compare	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
lexicographical_compare	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^  lexicographical_compare(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
lexicographical_compare	/home/alan/.vim/tags/cpp_src/stl_algobase.h	/^  lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
_QUEUE_H	/home/alan/.vim/tags/cpp_src/stl_queue.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^namespace std {$/;"	n
queue	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    class queue$/;"	c	namespace:std
_Sequence_value_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::queue	access:private
operator ==	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^        operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^        operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
value_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::queue	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::queue	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::queue	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::queue	access:public
container_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::queue	access:public
c	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      _Sequence c;$/;"	m	class:std::queue	access:protected
queue	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      queue(const _Sequence& __c = _Sequence()) : c(__c) {}$/;"	f	class:std::queue	access:public	signature:(const _Sequence& __c = _Sequence())
empty	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      empty() const$/;"	f	class:std::queue	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      size() const$/;"	f	class:std::queue	access:public	signature:() const
front	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      front()$/;"	f	class:std::queue	access:public	signature:()
front	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      front() const$/;"	f	class:std::queue	access:public	signature:() const
back	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      back()$/;"	f	class:std::queue	access:public	signature:()
back	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      back() const$/;"	f	class:std::queue	access:public	signature:() const
push	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::queue	access:public	signature:(const value_type& __x)
pop	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      pop()$/;"	f	class:std::queue	access:public	signature:()
operator ==	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
priority_queue	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^    class priority_queue$/;"	c	namespace:std
_Sequence_value_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::priority_queue	access:private
value_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::priority_queue	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::priority_queue	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::priority_queue	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::priority_queue	access:public
container_type	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::priority_queue	access:public
c	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      _Sequence  c;$/;"	m	class:std::priority_queue	access:protected
comp	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      _Compare   comp;$/;"	m	class:std::priority_queue	access:protected
priority_queue	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      priority_queue(const _Compare& __x = _Compare(),$/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
priority_queue	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^        priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
empty	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      empty() const$/;"	f	class:std::priority_queue	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      size() const$/;"	f	class:std::priority_queue	access:public	signature:() const
top	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      top() const$/;"	f	class:std::priority_queue	access:public	signature:() const
push	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::priority_queue	access:public	signature:(const value_type& __x)
pop	/home/alan/.vim/tags/cpp_src/stl_queue.h	/^      pop()$/;"	f	class:std::priority_queue	access:public	signature:()
_STL_RAW_STORAGE_ITERATOR_H	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^namespace std {$/;"	n
raw_storage_iterator	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^    class raw_storage_iterator$/;"	c	namespace:std	inherits:iterator
_M_iter	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      _ForwardIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	access:protected
raw_storage_iterator	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      raw_storage_iterator(_ForwardIterator __x)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(const _Tp& __element)
operator ++	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      operator++()$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_raw_storage_iter.h	/^      operator++(int)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(int)
_STL_NUMERIC_H	/home/alan/.vim/tags/cpp_src/stl_numeric.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^namespace std {$/;"	n
accumulate	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
accumulate	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
inner_product	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
inner_product	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
partial_sum	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
partial_sum	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
adjacent_difference	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    adjacent_difference(_InputIterator __first,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
adjacent_difference	/home/alan/.vim/tags/cpp_src/stl_numeric.h	/^    adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
_LOCALE_CLASSES_H	/home/alan/.vim/tags/cpp_src/locale_classes.h	41;"	d
std	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^namespace std {$/;"	n
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^  class locale$/;"	c	namespace:std
category	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    typedef int	category;$/;"	t	class:std::locale	access:public
has_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      has_facet(const locale&) throw();$/;"	p	class:std::locale	access:friend	signature:(const locale&)
use_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      use_facet(const locale&);$/;"	p	class:std::locale	access:friend	signature:(const locale&)
none	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category none		= 0;$/;"	m	class:std::locale	access:public
ctype	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	m	class:std::locale	access:public
numeric	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	m	class:std::locale	access:public
collate	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	m	class:std::locale	access:public
time	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category time		= 1L << 3;$/;"	m	class:std::locale	access:public
monetary	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	m	class:std::locale	access:public
messages	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	m	class:std::locale	access:public
all	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	m	class:std::locale	access:public
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale() throw();$/;"	p	class:std::locale	access:public	signature:()
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale& __other)
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale(const char* __s);$/;"	p	class:std::locale	access:public	signature:(const char* __s)
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale& __base, const char* __s, category __cat)
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale& __base, const locale& __add, category __cat)
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	access:public	signature:(const locale& __other, _Facet* __f)
~locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    ~locale() throw();$/;"	p	class:std::locale	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale& __other)
combine	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	access:public	signature:(const locale& __other) const
name	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    name() const;$/;"	p	class:std::locale	access:public	signature:() const
operator ==	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator==(const locale& __other) const throw ();$/;"	p	class:std::locale	access:public	signature:(const locale& __other) const
operator !=	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator!=(const locale& __other) const throw ()$/;"	f	class:std::locale	access:public	signature:(const locale& __other) const
operator ()	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	access:public	signature:(const basic_string<_Char, _Traits, _Alloc>& __s1, const basic_string<_Char, _Traits, _Alloc>& __s2) const
global	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    global(const locale&);$/;"	p	class:std::locale	access:public	signature:(const locale&)
classic	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    classic();$/;"	p	class:std::locale	access:public	signature:()
_M_impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Impl*		_M_impl;$/;"	m	class:std::locale	access:private
_S_classic	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static _Impl*       _S_classic;$/;"	m	class:std::locale	access:private
_S_global	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static _Impl*	_S_global;$/;"	m	class:std::locale	access:private
_S_categories	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	access:private
_S_categories_size	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	e	enum:std::locale::__anon9
_S_once	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	access:private
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	access:private	signature:(_Impl*)
_S_initialize	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_initialize();$/;"	p	class:std::locale	access:private	signature:()
_S_initialize_once	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale	access:private	signature:()
_S_normalize_category	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_normalize_category(category);$/;"	p	class:std::locale	access:private	signature:(category)
_M_coalesce	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:private	signature:(const locale& __base, const locale& __add, category __cat)
facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^  class locale::facet$/;"	c	class:std::locale
_M_refcount	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	m	class:std::locale::facet	access:private
_S_c_locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	m	class:std::locale::facet	access:private
_S_c_name	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const char			_S_c_name[2];$/;"	m	class:std::locale::facet	access:private
_S_once	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	m	class:std::locale::facet	access:private
_S_initialize_once	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	access:private	signature:()
facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet	access:protected	signature:(size_t __refs = 0)
~facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    ~facet();$/;"	p	class:std::locale::facet	access:protected	signature:()
_S_create_c_locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	access:protected	signature:(__c_locale& __cloc, const char* __s, __c_locale __old = 0)
_S_clone_c_locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	access:protected	signature:(__c_locale& __cloc)
_S_destroy_c_locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	access:protected	signature:(__c_locale& __cloc)
_S_get_c_locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	access:protected	signature:()
_S_get_c_name	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _S_get_c_name();$/;"	p	class:std::locale::facet	access:protected	signature:()
_M_add_reference	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	access:private	signature:() const
_M_remove_reference	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	access:private	signature:() const
facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet&)
operator =	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet&)
id	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^  class locale::id$/;"	c	class:std::locale
use_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      use_facet(const locale&);$/;"	p	class:std::locale::id	access:friend	signature:(const locale&)
has_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      has_facet(const locale&) throw ();$/;"	p	class:std::locale::id	access:friend	signature:(const locale&)
_M_index	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    mutable size_t		_M_index;$/;"	m	class:std::locale::id	access:private
_S_refcount	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	m	class:std::locale::id	access:private
operator =	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id&)
id	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id&)
id	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    id() { }$/;"	f	class:std::locale::id	access:public	signature:()
_M_id	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_id() const;$/;"	p	class:std::locale::id	access:public	signature:() const
_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^  class locale::_Impl$/;"	c	class:std::locale
has_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      has_facet(const locale&) throw();$/;"	p	class:std::locale::_Impl	access:friend	signature:(const locale&)
use_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      use_facet(const locale&);$/;"	p	class:std::locale::_Impl	access:friend	signature:(const locale&)
_M_refcount	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	m	class:std::locale::_Impl	access:private
_M_facets	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    const facet**			_M_facets;$/;"	m	class:std::locale::_Impl	access:private
_M_facets_size	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    size_t				_M_facets_size;$/;"	m	class:std::locale::_Impl	access:private
_M_caches	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    const facet**			_M_caches;$/;"	m	class:std::locale::_Impl	access:private
_M_names	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    char**				_M_names;$/;"	m	class:std::locale::_Impl	access:private
_S_id_ctype	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_id_numeric	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_id_collate	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_id_time	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_id_monetary	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_id_messages	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	m	class:std::locale::_Impl::locale	access:private
_S_facet_categories	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl::locale	access:private
_M_add_reference	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	access:private	signature:()
_M_remove_reference	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	access:private	signature:()
_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl&, size_t)
_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const char*, size_t)
_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	access:private	signature:(size_t)
~_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	access:private	signature:()
_Impl	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl&)
operator =	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl&)
_M_check_same_name	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	access:private	signature:()
_M_replace_categories	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl*, category)
_M_replace_category	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl*, const locale::id* const*)
_M_replace_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl*, const locale::id*)
_M_install_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	access:private	signature:(const locale::id*, const facet*)
_M_init_facet	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	access:private	signature:(_Facet* __facet)
_M_install_cache	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const facet*, size_t)
locale	/home/alan/.vim/tags/cpp_src/locale_classes.h	/^    locale::locale(const locale& __other, _Facet* __f)$/;"	f	class:std::locale	signature:(const locale& __other, _Facet* __f)
_VALARRAY_AFTER_H	/home/alan/.vim/tags/cpp_src/valarray_after.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^namespace std {$/;"	n
_GBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    class _GBase$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	t	class:std::_GBase	access:public
_GBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _GBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	f	class:std::_GBase	access:public	signature:(const _Dom& __e, const valarray<size_t>& __i)
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator[] (size_t __i) const$/;"	f	class:std::_GBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      size () const$/;"	f	class:std::_GBase	access:public	signature:() const
_M_expr	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	m	class:std::_GBase	access:private
_M_index	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	m	class:std::_GBase	access:private
_GBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    class _GBase<_Array<_Tp> >$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _Tp value_type;$/;"	t	class:std::_GBase	access:public
_GBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _GBase (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	f	class:std::_GBase	access:public	signature:(_Array<_Tp> __a, const valarray<size_t>& __i)
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator[] (size_t __i) const$/;"	f	class:std::_GBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      size () const$/;"	f	class:std::_GBase	access:public	signature:() const
_M_array	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const _Array<_Tp>       _M_array;$/;"	m	class:std::_GBase	access:private
_M_index	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	m	class:std::_GBase	access:private
_GClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    struct _GClos<_Expr, _Dom>$/;"	s	namespace:std	inherits:_GBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _GBase<_Dom> _Base;$/;"	t	struct:std::_GClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_GClos	access:public
_GClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _GClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	f	struct:std::_GClos	access:public	signature:(const _Dom& __e, const valarray<size_t>& __i)
_GClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    struct _GClos<_ValArray, _Tp>$/;"	s	namespace:std	inherits:_GBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _GBase<_Array<_Tp> > _Base;$/;"	t	struct:std::_GClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_GClos	access:public
_GClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _GClos (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	f	struct:std::_GClos	access:public	signature:(_Array<_Tp> __a, const valarray<size_t>& __i)
_IBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    class _IBase$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	t	class:std::_IBase	access:public
_IBase	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _IBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	f	class:std::_IBase	access:public	signature:(const _Dom& __e, const valarray<size_t>& __i)
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator[] (size_t __i) const$/;"	f	class:std::_IBase	access:public	signature:(size_t __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      size() const$/;"	f	class:std::_IBase	access:public	signature:() const
_M_expr	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	m	class:std::_IBase	access:private
_M_index	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	m	class:std::_IBase	access:private
_IClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    struct _IClos<_Expr, _Dom>$/;"	s	namespace:std	inherits:_IBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _IBase<_Dom> _Base;$/;"	t	struct:std::_IClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	t	struct:std::_IClos	access:public
_IClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _IClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	f	struct:std::_IClos	access:public	signature:(const _Dom& __e, const valarray<size_t>& __i)
_IClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    struct _IClos<_ValArray, _Tp>$/;"	s	namespace:std	inherits:_IBase
_Base	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _IBase<valarray<_Tp> > _Base;$/;"	t	struct:std::_IClos	access:public
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _Tp value_type;$/;"	t	struct:std::_IClos	access:public
_IClos	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _IClos (const valarray<_Tp>& __a, const valarray<size_t>& __i)$/;"	f	struct:std::_IClos	access:public	signature:(const valarray<_Tp>& __a, const valarray<size_t>& __i)
_Expr	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    class _Expr$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      typedef _Tp value_type;$/;"	t	class:std::_Expr	access:public
_Expr	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      _Expr(const _Clos&);$/;"	p	class:std::_Expr	access:public	signature:(const _Clos&)
operator ()	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const _Clos& operator()() const;$/;"	p	class:std::_Expr	access:public	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      value_type operator[](size_t) const;$/;"	p	class:std::_Expr	access:public	signature:(size_t) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> operator[](slice) const;$/;"	p	class:std::_Expr	access:public	signature:(slice) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> operator[](const gslice&) const;$/;"	p	class:std::_Expr	access:public	signature:(const gslice&) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> operator[](const valarray<bool>&) const;$/;"	p	class:std::_Expr	access:public	signature:(const valarray<bool>&) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> operator[](const valarray<size_t>&) const;$/;"	p	class:std::_Expr	access:public	signature:(const valarray<size_t>&) const
operator +	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator+() const;$/;"	p	class:std::_Expr	access:public	signature:() const
operator -	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator-() const;$/;"	p	class:std::_Expr	access:public	signature:() const
operator ~	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator~() const;$/;"	p	class:std::_Expr	access:public	signature:() const
operator !	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      operator!() const;$/;"	p	class:std::_Expr	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      size_t size() const;$/;"	p	class:std::_Expr	access:public	signature:() const
sum	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      value_type sum() const;$/;"	p	class:std::_Expr	access:public	signature:() const
shift	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> shift(int) const;$/;"	p	class:std::_Expr	access:public	signature:(int) const
cshift	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> cshift(int) const;$/;"	p	class:std::_Expr	access:public	signature:(int) const
min	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      value_type min() const;$/;"	p	class:std::_Expr	access:public	signature:() const
max	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      value_type max() const;$/;"	p	class:std::_Expr	access:public	signature:() const
apply	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> apply(value_type (*)(const value_type&)) const;$/;"	p	class:std::_Expr	access:public	signature:(value_type ()const value_type&)) const
apply	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      valarray<value_type> apply(value_type (*)(value_type)) const;$/;"	p	class:std::_Expr	access:public	signature:(value_type ()value_type)) const
_M_closure	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^      const _Clos _M_closure;$/;"	m	class:std::_Expr	access:private
_Expr	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::_Expr(const _Clos& __c) : _M_closure(__c) {}$/;"	f	class:std::_Expr	signature:(const _Clos& __c)
operator ()	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator()() const$/;"	f	class:std::_Expr	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](size_t __i) const$/;"	f	class:std::_Expr	signature:(size_t __i) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](slice __s) const$/;"	f	class:std::_Expr	signature:(slice __s) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const gslice& __gs) const$/;"	f	class:std::_Expr	signature:(const gslice& __gs) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<bool>& __m) const$/;"	f	class:std::_Expr	signature:(const valarray<bool>& __m) const
operator []	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<size_t>& __i) const$/;"	f	class:std::_Expr	signature:(const valarray<size_t>& __i) const
size	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::size() const$/;"	f	class:std::_Expr	signature:() const
shift	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::shift(int __n) const$/;"	f	class:std::_Expr	signature:(int __n) const
cshift	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::cshift(int __n) const$/;"	f	class:std::_Expr	signature:(int __n) const
__f	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(const _Tp&)) const$/;"	f	class:std::_Expr	signature:(const _Tp&) const
__f	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(_Tp)) const$/;"	f	class:std::_Expr	signature:(_Tp) const
sum	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::sum() const$/;"	f	class:std::_Expr	signature:() const
min	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::min() const$/;"	f	class:std::_Expr	signature:() const
max	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Clos, _Tp>::max() const$/;"	f	class:std::_Expr	signature:() const
operator !	/home/alan/.vim/tags/cpp_src/valarray_after.h	/^    _Expr<_Dom, _Tp>::operator!() const$/;"	f	class:std::_Expr	signature:() const
_DEFINE_EXPR_UNARY_OPERATOR	/home/alan/.vim/tags/cpp_src/valarray_after.h	326;"	d
_DEFINE_EXPR_UNARY_OPERATOR	/home/alan/.vim/tags/cpp_src/valarray_after.h	339;"	d
_DEFINE_EXPR_BINARY_OPERATOR	/home/alan/.vim/tags/cpp_src/valarray_after.h	341;"	d
_DEFINE_EXPR_BINARY_OPERATOR	/home/alan/.vim/tags/cpp_src/valarray_after.h	425;"	d
_DEFINE_EXPR_UNARY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_after.h	427;"	d
_DEFINE_EXPR_UNARY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_after.h	461;"	d
_DEFINE_EXPR_BINARY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_after.h	463;"	d
_DEFINE_EXPR_BINARY_FUNCTION	/home/alan/.vim/tags/cpp_src/valarray_after.h	550;"	d
_MULTIMAP_H	/home/alan/.vim/tags/cpp_src/stl_multimap.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^namespace std {$/;"	n
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    class multimap$/;"	c	namespace:std
key_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::multimap	access:public
mapped_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::multimap	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::multimap	access:public
key_compare	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::multimap	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::multimap	access:public
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multimap	access:private
value_compare	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      class value_compare$/;"	c	class:std::multimap	inherits:std::binary_function	access:public
comp	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^	_Compare comp;$/;"	m	class:std::multimap::value_compare	access:protected
value_compare	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^	value_compare(_Compare __c)$/;"	f	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
operator ()	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
_Pair_alloc_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        _Pair_alloc_type;$/;"	t	class:std::multimap	access:private
_Rep_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::multimap	access:private
_M_t	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      _Rep_type _M_t;$/;"	m	class:std::multimap	access:private
pointer	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::multimap	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::multimap	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::multimap	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::multimap	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::multimap	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::multimap	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::multimap	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::multimap	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::multimap	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multimap	access:public
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      multimap()$/;"	f	class:std::multimap	access:public	signature:()
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      multimap(const _Compare& __comp,$/;"	f	class:std::multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      multimap(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
operator =	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      operator=(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
get_allocator	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      get_allocator() const$/;"	f	class:std::multimap	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      begin()$/;"	f	class:std::multimap	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      begin() const$/;"	f	class:std::multimap	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      end()$/;"	f	class:std::multimap	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      end() const$/;"	f	class:std::multimap	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      rbegin()$/;"	f	class:std::multimap	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      rbegin() const$/;"	f	class:std::multimap	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      rend()$/;"	f	class:std::multimap	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      rend() const$/;"	f	class:std::multimap	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      empty() const$/;"	f	class:std::multimap	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      size() const$/;"	f	class:std::multimap	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      max_size() const$/;"	f	class:std::multimap	access:public	signature:() const
insert	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      insert(const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      erase(iterator __position)$/;"	f	class:std::multimap	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      erase(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
erase	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multimap	access:public	signature:(iterator __first, iterator __last)
swap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      swap(multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(multimap& __x)
clear	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      clear()$/;"	f	class:std::multimap	access:public	signature:()
key_comp	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      key_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
value_comp	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      value_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
find	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      find(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
find	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      find(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
count	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      count(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
lower_bound	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
lower_bound	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
upper_bound	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
upper_bound	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
equal_range	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
equal_range	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
operator ==	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator <	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^        operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator ==	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_multimap.h	/^    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multimap<_Key, _Tp, _Compare, _Alloc>& __x, multimap<_Key, _Tp, _Compare, _Alloc>& __y)
_STL_HEAP_H	/home/alan/.vim/tags/cpp_src/stl_heap.h	61;"	d
std	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^namespace std {$/;"	n
__is_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _Distance __n)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __n)
__is_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance __n)
__is_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__is_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)
__push_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
push_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__push_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
push_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__adjust_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
__pop_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value)
pop_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__adjust_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
__pop_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp)
pop_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
make_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
make_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
sort_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
sort_heap	/home/alan/.vim/tags/cpp_src/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
_PAIR_H	/home/alan/.vim/tags/cpp_src/stl_pair.h	62;"	d
std	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^namespace std {$/;"	n
pair	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    struct pair$/;"	s	namespace:std
first_type	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/<  @c first_type is the first bound type$/;"	t	struct:std::pair	access:public
second_type	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/<  @c second_type is the second bound type$/;"	t	struct:std::pair	access:public
first	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      _T1 first;                 \/\/\/< @c first is a copy of the first object$/;"	m	struct:std::pair	access:public
second	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      _T2 second;                \/\/\/< @c second is a copy of the second object$/;"	m	struct:std::pair	access:public
pair	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      pair()$/;"	f	struct:std::pair	access:public	signature:()
pair	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1& __a, const _T2& __b)
pair	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^        pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1, _U2>& __p)
operator ==	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
make_pair	/home/alan/.vim/tags/cpp_src/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	signature:(_T1 __x, _T2 __y)
_EXCEPTION_DEFINES_H	/home/alan/.vim/tags/cpp_src/exception_defines.h	39;"	d
try	/home/alan/.vim/tags/cpp_src/exception_defines.h	43;"	d
catch	/home/alan/.vim/tags/cpp_src/exception_defines.h	44;"	d
__throw_exception_again	/home/alan/.vim/tags/cpp_src/exception_defines.h	45;"	d
__throw_exception_again	/home/alan/.vim/tags/cpp_src/exception_defines.h	48;"	d
_GLIBCXX_POSTYPES_H	/home/alan/.vim/tags/cpp_src/postypes.h	42;"	d
std	/home/alan/.vim/tags/cpp_src/postypes.h	/^namespace std {$/;"	n
streamoff	/home/alan/.vim/tags/cpp_src/postypes.h	/^  typedef int64_t       streamoff;$/;"	t	namespace:std
streamsize	/home/alan/.vim/tags/cpp_src/postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	t	namespace:std
fpos	/home/alan/.vim/tags/cpp_src/postypes.h	/^    class fpos$/;"	c	namespace:std
_M_off	/home/alan/.vim/tags/cpp_src/postypes.h	/^      streamoff	                _M_off;$/;"	m	class:std::fpos	access:private
_M_state	/home/alan/.vim/tags/cpp_src/postypes.h	/^      _StateT			_M_state;$/;"	m	class:std::fpos	access:private
fpos	/home/alan/.vim/tags/cpp_src/postypes.h	/^      fpos()$/;"	f	class:std::fpos	access:public	signature:()
fpos	/home/alan/.vim/tags/cpp_src/postypes.h	/^      fpos(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
operator streamoff	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos	access:public	signature:() const
state	/home/alan/.vim/tags/cpp_src/postypes.h	/^      state(_StateT __st)$/;"	f	class:std::fpos	access:public	signature:(_StateT __st)
state	/home/alan/.vim/tags/cpp_src/postypes.h	/^      state() const$/;"	f	class:std::fpos	access:public	signature:() const
operator +=	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
operator -=	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
operator +	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos	access:public	signature:(streamoff __off) const
operator -	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos	access:public	signature:(streamoff __off) const
operator -	/home/alan/.vim/tags/cpp_src/postypes.h	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos	access:public	signature:(const fpos& __other) const
operator ==	/home/alan/.vim/tags/cpp_src/postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	signature:(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	signature:(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
streampos	/home/alan/.vim/tags/cpp_src/postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std
wstreampos	/home/alan/.vim/tags/cpp_src/postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std
_STREAM_ITERATOR_H	/home/alan/.vim/tags/cpp_src/stream_iterator.h	36;"	d
std	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^namespace std {$/;"	n
istream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^    class istream_iterator$/;"	c	namespace:std	inherits:iterator
char_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	t	class:std::istream_iterator	access:public
traits_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	t	class:std::istream_iterator	access:public
istream_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:std::istream_iterator	access:public
_M_stream	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      istream_type*	_M_stream;$/;"	m	class:std::istream_iterator	access:private
_M_value	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      _Tp		_M_value;$/;"	m	class:std::istream_iterator	access:private
_M_ok	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      bool		_M_ok;$/;"	m	class:std::istream_iterator	access:private
istream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      istream_iterator()$/;"	f	class:std::istream_iterator	access:public	signature:()
istream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      istream_iterator(istream_type& __s)$/;"	f	class:std::istream_iterator	access:public	signature:(istream_type& __s)
istream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      istream_iterator(const istream_iterator& __obj)$/;"	f	class:std::istream_iterator	access:public	signature:(const istream_iterator& __obj)
operator *	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator*() const$/;"	f	class:std::istream_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator->() const { return &(operator*()); }$/;"	f	class:std::istream_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator++()$/;"	f	class:std::istream_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator++(int)$/;"	f	class:std::istream_iterator	access:public	signature:(int)
_M_equal	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      _M_equal(const istream_iterator& __x) const$/;"	f	class:std::istream_iterator	access:public	signature:(const istream_iterator& __x) const
_M_read	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      _M_read()$/;"	f	class:std::istream_iterator	access:private	signature:()
operator ==	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
ostream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^    class ostream_iterator$/;"	c	namespace:std	inherits:iterator
char_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	t	class:std::ostream_iterator	access:public
traits_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	t	class:std::ostream_iterator	access:public
ostream_type	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:std::ostream_iterator	access:public
_M_stream	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      ostream_type*	_M_stream;$/;"	m	class:std::ostream_iterator	access:private
_M_string	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      const _CharT*	_M_string;$/;"	m	class:std::ostream_iterator	access:private
ostream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s)
ostream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      ostream_iterator(ostream_type& __s, const _CharT* __c)$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s, const _CharT* __c)
ostream_iterator	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      ostream_iterator(const ostream_iterator& __obj)$/;"	f	class:std::ostream_iterator	access:public	signature:(const ostream_iterator& __obj)
operator =	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator=(const _Tp& __value)$/;"	f	class:std::ostream_iterator	access:public	signature:(const _Tp& __value)
operator *	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator*()$/;"	f	class:std::ostream_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator++()$/;"	f	class:std::ostream_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stream_iterator.h	/^      operator++(int)$/;"	f	class:std::ostream_iterator	access:public	signature:(int)
_BOOST_CONCEPT_CHECK_H	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	45;"	d
_IsUnused	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	55;"	d
__function_requires	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^inline void __function_requires()$/;"	f	signature:()
__error_type_must_be_an_integer_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^void __error_type_must_be_an_integer_type();$/;"	p	signature:()
__error_type_must_be_an_unsigned_integer_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^void __error_type_must_be_an_unsigned_integer_type();$/;"	p	signature:()
__error_type_must_be_a_signed_integer_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^void __error_type_must_be_a_signed_integer_type();$/;"	p	signature:()
_GLIBCXX_CLASS_REQUIRES	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	74;"	d
_GLIBCXX_CLASS_REQUIRES2	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	82;"	d
_GLIBCXX_CLASS_REQUIRES3	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	90;"	d
_GLIBCXX_CLASS_REQUIRES4	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	98;"	d
_Aux_require_same	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^struct _Aux_require_same { };$/;"	s
_Aux_require_same	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };$/;"	s
_Type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };$/;"	t	struct:_Aux_require_same	access:public
_SameTypeConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SameTypeConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SameTypeConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _IntegerConcept {$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<short> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<short> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned short> { void __constraints(){} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned short> { void __constraints(){} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<int> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<int> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<long> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<long> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<long long> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<long long> { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_IntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long long>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^                                                { void __constraints() {} };$/;"	f	struct:_IntegerConcept	access:public	signature:()
_SignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SignedIntegerConcept {$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SignedIntegerConcept	access:public	signature:()
_SignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<short> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<short> { void __constraints() {} };$/;"	f	struct:_SignedIntegerConcept	access:public	signature:()
_SignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<int> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<int> { void __constraints() {} };$/;"	f	struct:_SignedIntegerConcept	access:public	signature:()
_SignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long> { void __constraints() {} };$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long> { void __constraints() {} };$/;"	f	struct:_SignedIntegerConcept	access:public	signature:()
_SignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};$/;"	f	struct:_SignedIntegerConcept	access:public	signature:()
_UnsignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _UnsignedIntegerConcept {$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_UnsignedIntegerConcept	access:public	signature:()
_UnsignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned short>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    { void __constraints() {} };$/;"	f	struct:_UnsignedIntegerConcept	access:public	signature:()
_UnsignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned int>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    { void __constraints() {} };$/;"	f	struct:_UnsignedIntegerConcept	access:public	signature:()
_UnsignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned long>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    { void __constraints() {} };$/;"	f	struct:_UnsignedIntegerConcept	access:public	signature:()
_UnsignedIntegerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned long long>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    { void __constraints() {} };$/;"	f	struct:_UnsignedIntegerConcept	access:public	signature:()
_DefaultConstructibleConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _DefaultConstructibleConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_DefaultConstructibleConcept	access:public	signature:()
_AssignableConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _AssignableConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_AssignableConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	f	struct:_AssignableConcept	access:public	signature:(const _Tp& __b)
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a;$/;"	m	struct:_AssignableConcept	access:public
_CopyConstructibleConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _CopyConstructibleConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_CopyConstructibleConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _Tp& __a) {$/;"	f	struct:_CopyConstructibleConcept	access:public	signature:(const _Tp& __a)
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __b;$/;"	m	struct:_CopyConstructibleConcept	access:public
_SGIAssignableConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SGIAssignableConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SGIAssignableConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	f	struct:_SGIAssignableConcept	access:public	signature:(const _Tp& __b)
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a;$/;"	m	struct:_SGIAssignableConcept	access:public
_ConvertibleConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ConvertibleConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ConvertibleConcept	access:public	signature:()
__x	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _From __x;$/;"	m	struct:_ConvertibleConcept	access:public
__aux_require_boolean_expr	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  void __aux_require_boolean_expr(const _Tp& __t) {$/;"	f	signature:(const _Tp& __t)
_EqualityComparableConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _EqualityComparableConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_EqualityComparableConcept	access:public	signature:()
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_EqualityComparableConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_EqualityComparableConcept	access:public
_LessThanComparableConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _LessThanComparableConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_LessThanComparableConcept	access:public	signature:()
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_LessThanComparableConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_LessThanComparableConcept	access:public
_ComparableConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ComparableConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ComparableConcept	access:public	signature:()
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_ComparableConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_ComparableConcept	access:public
_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	275;"	d
_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	286;"	d
_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	310;"	d
_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	311;"	d
_GeneratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _GeneratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_GeneratorConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_GeneratorConcept	access:public
_GeneratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _GeneratorConcept<_Func,void>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_GeneratorConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_GeneratorConcept	access:public
_UnaryFunctionConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _UnaryFunctionConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_UnaryFunctionConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_UnaryFunctionConcept	access:public
__arg	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Arg __arg;$/;"	m	struct:_UnaryFunctionConcept	access:public
__r	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Return __r;$/;"	m	struct:_UnaryFunctionConcept	access:public
_UnaryFunctionConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _UnaryFunctionConcept<_Func, void, _Arg> {$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_UnaryFunctionConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_UnaryFunctionConcept	access:public
__arg	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Arg __arg;$/;"	m	struct:_UnaryFunctionConcept	access:public
_BinaryFunctionConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _BinaryFunctionConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_BinaryFunctionConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_BinaryFunctionConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _First __first;$/;"	m	struct:_BinaryFunctionConcept	access:public
__second	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Second __second;$/;"	m	struct:_BinaryFunctionConcept	access:public
__r	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Return __r;$/;"	m	struct:_BinaryFunctionConcept	access:public
_BinaryFunctionConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _BinaryFunctionConcept<_Func, void, _First, _Second>$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_BinaryFunctionConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_BinaryFunctionConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _First __first;$/;"	m	struct:_BinaryFunctionConcept	access:public
__second	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Second __second;$/;"	m	struct:_BinaryFunctionConcept	access:public
_UnaryPredicateConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _UnaryPredicateConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_UnaryPredicateConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_UnaryPredicateConcept	access:public
__arg	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Arg __arg;$/;"	m	struct:_UnaryPredicateConcept	access:public
_BinaryPredicateConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _BinaryPredicateConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_BinaryPredicateConcept	access:public	signature:()
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_BinaryPredicateConcept	access:public
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _First __a;$/;"	m	struct:_BinaryPredicateConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Second __b;$/;"	m	struct:_BinaryPredicateConcept	access:public
_Const_BinaryPredicateConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Const_BinaryPredicateConcept {$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Const_BinaryPredicateConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _Func& __fun) {$/;"	f	struct:_Const_BinaryPredicateConcept	access:public	signature:(const _Func& __fun)
__f	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Func __f;$/;"	m	struct:_Const_BinaryPredicateConcept	access:public
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _First __a;$/;"	m	struct:_Const_BinaryPredicateConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Second __b;$/;"	m	struct:_Const_BinaryPredicateConcept	access:public
_TrivialIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _TrivialIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_TrivialIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_TrivialIteratorConcept	access:public
_Mutable_TrivialIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_TrivialIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_TrivialIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i, __j;$/;"	m	struct:_Mutable_TrivialIteratorConcept	access:public
__j	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i, __j;$/;"	m	struct:_Mutable_TrivialIteratorConcept	access:public
_InputIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _InputIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_InputIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_InputIteratorConcept	access:public
_OutputIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _OutputIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_OutputIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_OutputIteratorConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _ValueT __t;$/;"	m	struct:_OutputIteratorConcept	access:public
_ForwardIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ForwardIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ForwardIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_ForwardIteratorConcept	access:public
_Mutable_ForwardIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_ForwardIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_ForwardIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_Mutable_ForwardIteratorConcept	access:public
_BidirectionalIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _BidirectionalIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_BidirectionalIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_BidirectionalIteratorConcept	access:public
_Mutable_BidirectionalIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_BidirectionalIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_BidirectionalIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_Mutable_BidirectionalIteratorConcept	access:public
_RandomAccessIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _RandomAccessIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_RandomAccessIteratorConcept	access:public	signature:()
__a	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_RandomAccessIteratorConcept	access:public
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __a, __b;$/;"	m	struct:_RandomAccessIteratorConcept	access:public
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i, __j;$/;"	m	struct:_RandomAccessIteratorConcept	access:public
__j	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i, __j;$/;"	m	struct:_RandomAccessIteratorConcept	access:public
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	m	struct:_RandomAccessIteratorConcept	access:public
_Mutable_RandomAccessIteratorConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_RandomAccessIteratorConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_RandomAccessIteratorConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Tp __i;$/;"	m	struct:_Mutable_RandomAccessIteratorConcept	access:public
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	m	struct:_Mutable_RandomAccessIteratorConcept	access:public
_ContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ContainerConcept$/;"	s
_Value_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	t	struct:_ContainerConcept	access:public
_Difference_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::difference_type _Difference_type;$/;"	t	struct:_ContainerConcept	access:public
_Size_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::size_type _Size_type;$/;"	t	struct:_ContainerConcept	access:public
_Const_reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::const_reference _Const_reference;$/;"	t	struct:_ContainerConcept	access:public
_Const_pointer	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::const_pointer _Const_pointer;$/;"	t	struct:_ContainerConcept	access:public
_Const_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::const_iterator _Const_iterator;$/;"	t	struct:_ContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ContainerConcept	access:public	signature:()
__b	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    bool __b;$/;"	m	struct:_ContainerConcept	access:public
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Const_iterator __i;$/;"	m	struct:_ContainerConcept	access:public
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Size_type __n;$/;"	m	struct:_ContainerConcept	access:public
_Mutable_ContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_ContainerConcept$/;"	s
_Value_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	t	struct:_Mutable_ContainerConcept	access:public
_Reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::reference _Reference;$/;"	t	struct:_Mutable_ContainerConcept	access:public
_Iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::iterator _Iterator;$/;"	t	struct:_Mutable_ContainerConcept	access:public
_Pointer	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Container::pointer _Pointer;$/;"	t	struct:_Mutable_ContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_ContainerConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Iterator __i;$/;"	m	struct:_Mutable_ContainerConcept	access:public
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Container __c, __c2;$/;"	m	struct:_Mutable_ContainerConcept	access:public
__c2	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Container __c, __c2;$/;"	m	struct:_Mutable_ContainerConcept	access:public
_ForwardContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ForwardContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ForwardContainerConcept	access:public	signature:()
_Mutable_ForwardContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_ForwardContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_ForwardContainerConcept	access:public	signature:()
_ReversibleContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _ReversibleContainerConcept$/;"	s
_Const_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _ReversibleContainer::const_iterator _Const_iterator;$/;"	t	struct:_ReversibleContainerConcept	access:public
_Const_reverse_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	t	struct:_ReversibleContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_ReversibleContainerConcept	access:public	signature:()
_Mutable_ReversibleContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_ReversibleContainerConcept$/;"	s
_Iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _ReversibleContainer::iterator _Iterator;$/;"	t	struct:_Mutable_ReversibleContainerConcept	access:public
_Reverse_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _ReversibleContainer::reverse_iterator _Reverse_iterator;$/;"	t	struct:_Mutable_ReversibleContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_ReversibleContainerConcept	access:public	signature:()
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _ReversibleContainer __c;$/;"	m	struct:_Mutable_ReversibleContainerConcept	access:public
_RandomAccessContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _RandomAccessContainerConcept$/;"	s
_Size_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	t	struct:_RandomAccessContainerConcept	access:public
_Const_reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_reference _Const_reference;$/;"	t	struct:_RandomAccessContainerConcept	access:public
_Const_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_iterator _Const_iterator;$/;"	t	struct:_RandomAccessContainerConcept	access:public
_Const_reverse_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	t	struct:_RandomAccessContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_RandomAccessContainerConcept	access:public	signature:()
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Size_type __n;$/;"	m	struct:_RandomAccessContainerConcept	access:public
_Mutable_RandomAccessContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _Mutable_RandomAccessContainerConcept$/;"	s
_Size_type	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	t	struct:_Mutable_RandomAccessContainerConcept	access:public
_Reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reference _Reference;$/;"	t	struct:_Mutable_RandomAccessContainerConcept	access:public
_Iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::iterator _Iterator;$/;"	t	struct:_Mutable_RandomAccessContainerConcept	access:public
_Reverse_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reverse_iterator _Reverse_iterator;$/;"	t	struct:_Mutable_RandomAccessContainerConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_Mutable_RandomAccessContainerConcept	access:public	signature:()
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Size_type __i;$/;"	m	struct:_Mutable_RandomAccessContainerConcept	access:public
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _RandomAccessContainer __c;$/;"	m	struct:_Mutable_RandomAccessContainerConcept	access:public
_SequenceConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SequenceConcept$/;"	s
_Reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Sequence::reference _Reference;$/;"	t	struct:_SequenceConcept	access:public
_Const_reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _Sequence::const_reference _Const_reference;$/;"	t	struct:_SequenceConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SequenceConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _Sequence& __c) {$/;"	f	struct:_SequenceConcept	access:public	signature:(const _Sequence& __c)
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::value_type __t;$/;"	m	struct:_SequenceConcept	access:public
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::size_type __n;$/;"	m	struct:_SequenceConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	m	struct:_SequenceConcept	access:public
__last	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	m	struct:_SequenceConcept	access:public
__p	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	m	struct:_SequenceConcept	access:public
__q	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	m	struct:_SequenceConcept	access:public
_FrontInsertionSequenceConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _FrontInsertionSequenceConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_FrontInsertionSequenceConcept	access:public	signature:()
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _FrontInsertionSequence __c;$/;"	m	struct:_FrontInsertionSequenceConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _FrontInsertionSequence::value_type __t;$/;"	m	struct:_FrontInsertionSequenceConcept	access:public
_BackInsertionSequenceConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _BackInsertionSequenceConcept$/;"	s
_Reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _BackInsertionSequence::reference _Reference;$/;"	t	struct:_BackInsertionSequenceConcept	access:public
_Const_reference	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _BackInsertionSequence::const_reference _Const_reference;$/;"	t	struct:_BackInsertionSequenceConcept	access:public
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_BackInsertionSequenceConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _BackInsertionSequence& __c) {$/;"	f	struct:_BackInsertionSequenceConcept	access:public	signature:(const _BackInsertionSequence& __c)
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _BackInsertionSequence __c;$/;"	m	struct:_BackInsertionSequenceConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _BackInsertionSequence::value_type __t;$/;"	m	struct:_BackInsertionSequenceConcept	access:public
_AssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _AssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_AssociativeContainerConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _AssociativeContainer& __c) {$/;"	f	struct:_AssociativeContainerConcept	access:public	signature:(const _AssociativeContainer& __c)
_Iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _AssociativeContainer::iterator _Iterator;$/;"	t	struct:_AssociativeContainerConcept	access:public
_Const_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _AssociativeContainer::const_iterator _Const_iterator;$/;"	t	struct:_AssociativeContainerConcept	access:public
__c	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _AssociativeContainer __c;$/;"	m	struct:_AssociativeContainerConcept	access:public
__i	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Iterator __i;$/;"	m	struct:_AssociativeContainerConcept	access:public
__r	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	m	struct:_AssociativeContainerConcept	access:public
__ci	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Const_iterator __ci;$/;"	m	struct:_AssociativeContainerConcept	access:public
__cr	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	m	struct:_AssociativeContainerConcept	access:public
__k	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _AssociativeContainer::key_type __k;$/;"	m	struct:_AssociativeContainerConcept	access:public
__n	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _AssociativeContainer::size_type __n;$/;"	m	struct:_AssociativeContainerConcept	access:public
_UniqueAssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _UniqueAssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_UniqueAssociativeContainerConcept	access:public	signature:()
__pos_flag	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    std::pair<typename _UniqueAssociativeContainer::iterator, bool> __pos_flag;$/;"	m	struct:_UniqueAssociativeContainerConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type __t;$/;"	m	struct:_UniqueAssociativeContainerConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_UniqueAssociativeContainerConcept	access:public
__last	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_UniqueAssociativeContainerConcept	access:public
_MultipleAssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _MultipleAssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_MultipleAssociativeContainerConcept	access:public	signature:()
__pos	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _MultipleAssociativeContainer::iterator __pos;$/;"	m	struct:_MultipleAssociativeContainerConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type __t;$/;"	m	struct:_MultipleAssociativeContainerConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_MultipleAssociativeContainerConcept	access:public
__last	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_MultipleAssociativeContainerConcept	access:public
_SimpleAssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SimpleAssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SimpleAssociativeContainerConcept	access:public	signature:()
_PairAssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _PairAssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_PairAssociativeContainerConcept	access:public	signature:()
_SortedAssociativeContainerConcept	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^  struct _SortedAssociativeContainerConcept$/;"	s
__constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __constraints() {$/;"	f	struct:_SortedAssociativeContainerConcept	access:public	signature:()
__const_constraints	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    void __const_constraints(const _SortedAssociativeContainer& __c) {$/;"	f	struct:_SortedAssociativeContainerConcept	access:public	signature:(const _SortedAssociativeContainer& __c)
__kc	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_compare __kc;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__vc	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_compare __vc;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__t	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type __t;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__k	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_type __k;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
_Iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typedef typename _SortedAssociativeContainer::iterator _Iterator;$/;"	t	struct:_SortedAssociativeContainerConcept	access:public
_Const_iterator	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^      _Const_iterator;$/;"	t	struct:_SortedAssociativeContainerConcept	access:public
__p	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Iterator __p;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__cp	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    _Const_iterator __cp;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__r	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__cr	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__first	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
__last	/home/alan/.vim/tags/cpp_src/boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	m	struct:_SortedAssociativeContainerConcept	access:public
_GSLICE_H	/home/alan/.vim/tags/cpp_src/gslice.h	39;"	d
std	/home/alan/.vim/tags/cpp_src/gslice.h	/^namespace std {$/;"	n
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^  class gslice$/;"	c	namespace:std
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^    gslice ();$/;"	p	class:std::gslice	access:public	signature:()
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^    gslice(size_t, const valarray<size_t>&, const valarray<size_t>&);$/;"	p	class:std::gslice	access:public	signature:(size_t, const valarray<size_t>&, const valarray<size_t>&)
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^    gslice(const gslice&);$/;"	p	class:std::gslice	access:public	signature:(const gslice&)
~gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^    ~gslice();$/;"	p	class:std::gslice	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/gslice.h	/^    gslice& operator=(const gslice&);$/;"	p	class:std::gslice	access:public	signature:(const gslice&)
start	/home/alan/.vim/tags/cpp_src/gslice.h	/^    size_t           start() const;$/;"	p	class:std::gslice	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/gslice.h	/^    valarray<size_t> size() const;$/;"	p	class:std::gslice	access:public	signature:() const
stride	/home/alan/.vim/tags/cpp_src/gslice.h	/^    valarray<size_t> stride() const;$/;"	p	class:std::gslice	access:public	signature:() const
_Indexer	/home/alan/.vim/tags/cpp_src/gslice.h	/^    struct _Indexer$/;"	s	class:std::gslice	access:private
_M_count	/home/alan/.vim/tags/cpp_src/gslice.h	/^      size_t _M_count;$/;"	m	struct:std::gslice::_Indexer	access:public
_M_start	/home/alan/.vim/tags/cpp_src/gslice.h	/^      size_t _M_start;$/;"	m	struct:std::gslice::_Indexer	access:public
_M_size	/home/alan/.vim/tags/cpp_src/gslice.h	/^      valarray<size_t> _M_size;$/;"	m	struct:std::gslice::_Indexer	access:public
_M_stride	/home/alan/.vim/tags/cpp_src/gslice.h	/^      valarray<size_t> _M_stride;$/;"	m	struct:std::gslice::_Indexer	access:public
_M_index	/home/alan/.vim/tags/cpp_src/gslice.h	/^      valarray<size_t> _M_index; \/\/ Linear array of referenced indices$/;"	m	struct:std::gslice::_Indexer	access:public
_Indexer	/home/alan/.vim/tags/cpp_src/gslice.h	/^      _Indexer(size_t, const valarray<size_t>&,$/;"	p	struct:std::gslice::_Indexer	access:public	signature:(size_t, const valarray<size_t>&, const valarray<size_t>&)
_M_increment_use	/home/alan/.vim/tags/cpp_src/gslice.h	/^      _M_increment_use()$/;"	f	struct:std::gslice::_Indexer	access:public	signature:()
_M_decrement_use	/home/alan/.vim/tags/cpp_src/gslice.h	/^      _M_decrement_use()$/;"	f	struct:std::gslice::_Indexer	access:public	signature:()
_M_index	/home/alan/.vim/tags/cpp_src/gslice.h	/^    _Indexer* _M_index;$/;"	m	class:std::gslice	access:private
start	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::start () const$/;"	f	class:std::gslice	signature:() const
size	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::size () const$/;"	f	class:std::gslice	signature:() const
stride	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::stride () const$/;"	f	class:std::gslice	signature:() const
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^  inline gslice::gslice () : _M_index(0) {}$/;"	f	class:std::gslice	signature:()
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::gslice(size_t __o, const valarray<size_t>& __l,$/;"	f	class:std::gslice	signature:(size_t __o, const valarray<size_t>& __l, const valarray<size_t>& __s)
gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::gslice(const gslice& __g) : _M_index(__g._M_index)$/;"	f	class:std::gslice	signature:(const gslice& __g)
~gslice	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::~gslice()$/;"	f	class:std::gslice	signature:()
operator =	/home/alan/.vim/tags/cpp_src/gslice.h	/^  gslice::operator= (const gslice& __g)$/;"	f	class:std::gslice	signature:(const gslice& __g)
_ITERATOR_H	/home/alan/.vim/tags/cpp_src/stl_iterator.h	67;"	d
std	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^namespace std {$/;"	n
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator
current	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	access:protected
iterator_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef _Iterator					       iterator_type;$/;"	t	class:std::reverse_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^							       difference_type;$/;"	t	class:std::reverse_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference   reference;$/;"	t	class:std::reverse_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer     pointer;$/;"	t	class:std::reverse_iterator	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator	access:public	signature:()
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator& __x)
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
base	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator *	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator->() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator +	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator +=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator -=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator []	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator ==	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator +	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
operator ==	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
back_insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator
container	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	access:protected
container_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	access:public
back_insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::back_insert_iterator	access:public	signature:(_Container& __x)
operator =	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
operator *	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	access:public	signature:(int)
back_inserter	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
front_insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator
container	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	access:protected
container_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	access:public
front_insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::front_insert_iterator	access:public	signature:(_Container& __x)
operator =	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
operator *	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	access:public	signature:(int)
front_inserter	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator
container	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::insert_iterator	access:protected
iter	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
container_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
insert_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
operator =	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator=(const typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::const_reference __value)
operator *	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	access:public	signature:(int)
inserter	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	signature:(_Container& __x, _Iterator __i)
__normal_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    class __normal_iterator$/;"	c
_M_current	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__normal_iterator	access:protected
iterator_category	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^                                                             iterator_category;$/;"	t	class:__normal_iterator	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::value_type  value_type;$/;"	t	class:__normal_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^                                                             difference_type;$/;"	t	class:__normal_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference reference;$/;"	t	class:__normal_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer   pointer;$/;"	t	class:__normal_iterator	access:public
__normal_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      __normal_iterator() : _M_current(_Iterator()) { }$/;"	f	class:__normal_iterator	access:public	signature:()
__normal_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	f	class:__normal_iterator	access:public	signature:(const _Iterator& __i)
__normal_iterator	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__normal_iterator	access:public	signature:(const __normal_iterator<_Iter, typename __enable_if< (std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type>& __i)
operator *	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator*() const$/;"	f	class:__normal_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator->() const$/;"	f	class:__normal_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++()$/;"	f	class:__normal_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator++(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator--()$/;"	f	class:__normal_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator--(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
operator []	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator[](const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
operator +=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator+=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
operator +	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator+(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
operator -=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator-=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      operator-(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
base	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^      base() const$/;"	f	class:__normal_iterator	access:public	signature:() const
operator ==	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator ==	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator <	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator <	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator >	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator >	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator <=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator <=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator >=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator >=	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator -	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator +	/home/alan/.vim/tags/cpp_src/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	signature:(typename __normal_iterator<_Iterator, _Container>::difference_type __n, const __normal_iterator<_Iterator, _Container>& __i)
_CODECVT_H	/home/alan/.vim/tags/cpp_src/codecvt.h	43;"	d
std	/home/alan/.vim/tags/cpp_src/codecvt.h	/^namespace std {$/;"	n
codecvt_base	/home/alan/.vim/tags/cpp_src/codecvt.h	/^  class codecvt_base$/;"	c	namespace:std
result	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    enum result$/;"	g	class:std::codecvt_base	access:public
ok	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ok,$/;"	e	enum:std::codecvt_base::result
partial	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      partial,$/;"	e	enum:std::codecvt_base::result
error	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      error,$/;"	e	enum:std::codecvt_base::result
noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      noconv$/;"	e	enum:std::codecvt_base::result
__codecvt_abstract_base	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    class __codecvt_abstract_base$/;"	c	namespace:std	inherits:locale::facet,codecvt_base
result	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef codecvt_base::result	result;$/;"	t	class:std::__codecvt_abstract_base	access:public
intern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _InternT			intern_type;$/;"	t	class:std::__codecvt_abstract_base	access:public
extern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _ExternT			extern_type;$/;"	t	class:std::__codecvt_abstract_base	access:public
state_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _StateT			state_type;$/;"	t	class:std::__codecvt_abstract_base	access:public
out	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      out(state_type& __state, const intern_type* __from,$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
unshift	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
in	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      in(state_type& __state, const extern_type* __from,$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const
encoding	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      encoding() const throw()$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:() const
always_noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      always_noconv() const throw()$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:() const
length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      length(state_type& __state, const extern_type* __from,$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:(state_type& __state, const extern_type* __from, const extern_type* __end, size_t __max) const
max_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      max_length() const throw()$/;"	f	class:std::__codecvt_abstract_base	access:public	signature:() const
__codecvt_abstract_base	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }$/;"	f	class:std::__codecvt_abstract_base	access:protected	signature:(size_t __refs = 0)
~__codecvt_abstract_base	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ~__codecvt_abstract_base() { }$/;"	f	class:std::__codecvt_abstract_base	access:protected	signature:()
do_out	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_unshift	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_in	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const
do_encoding	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_encoding() const throw() = 0;$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:() const
do_always_noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_always_noconv() const throw() = 0;$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:() const
do_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const
do_max_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_max_length() const throw() = 0;$/;"	p	class:std::__codecvt_abstract_base	access:protected	signature:() const
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    class codecvt$/;"	c	namespace:std	inherits:__codecvt_abstract_base
result	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef codecvt_base::result	result;$/;"	t	class:std::codecvt	access:public
intern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _InternT			intern_type;$/;"	t	class:std::codecvt	access:public
extern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _ExternT			extern_type;$/;"	t	class:std::codecvt	access:public
state_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef _StateT			state_type;$/;"	t	class:std::codecvt	access:public
_M_c_locale_codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      __c_locale			_M_c_locale_codecvt;$/;"	m	class:std::codecvt	access:protected
id	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      static locale::id			id;$/;"	m	class:std::codecvt	access:public
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(size_t __refs = 0)$/;"	f	class:std::codecvt	access:public	signature:(size_t __refs = 0)
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::codecvt	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
~codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ~codecvt() { }$/;"	f	class:std::codecvt	access:protected	signature:()
do_out	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_unshift	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_in	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const
do_encoding	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_encoding() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_always_noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_always_noconv() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const
do_max_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_max_length() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
id	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    locale::id codecvt<_InternT, _ExternT, _StateT>::id;$/;"	m	class:std::codecvt
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    class codecvt<char, char, mbstate_t>$/;"	c	namespace:std	inherits:__codecvt_abstract_base
intern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef char			intern_type;$/;"	t	class:std::codecvt	access:public
extern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef char			extern_type;$/;"	t	class:std::codecvt	access:public
state_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef mbstate_t			state_type;$/;"	t	class:std::codecvt	access:public
_M_c_locale_codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      __c_locale			_M_c_locale_codecvt;$/;"	m	class:std::codecvt	access:protected
id	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      static locale::id id;$/;"	m	class:std::codecvt	access:public
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(size_t __refs = 0);$/;"	p	class:std::codecvt	access:public	signature:(size_t __refs = 0)
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::codecvt	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
~codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ~codecvt();$/;"	p	class:std::codecvt	access:protected	signature:()
do_out	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_unshift	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_in	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const
do_encoding	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_encoding() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_always_noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_always_noconv() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const
do_max_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_max_length() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    class codecvt<wchar_t, char, mbstate_t>$/;"	c	namespace:std	inherits:__codecvt_abstract_base
intern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef wchar_t			intern_type;$/;"	t	class:std::codecvt	access:public
extern_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef char			extern_type;$/;"	t	class:std::codecvt	access:public
state_type	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      typedef mbstate_t			state_type;$/;"	t	class:std::codecvt	access:public
_M_c_locale_codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      __c_locale			_M_c_locale_codecvt;$/;"	m	class:std::codecvt	access:protected
id	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      static locale::id			id;$/;"	m	class:std::codecvt	access:public
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(size_t __refs = 0);$/;"	p	class:std::codecvt	access:public	signature:(size_t __refs = 0)
codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::codecvt	access:public	signature:(__c_locale __cloc, size_t __refs = 0)
~codecvt	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ~codecvt();$/;"	p	class:std::codecvt	access:protected	signature:()
do_out	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const intern_type* __from, const intern_type* __from_end, const intern_type*& __from_next, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_unshift	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_unshift(state_type& __state,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, extern_type* __to, extern_type* __to_end, extern_type*& __to_next) const
do_in	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_in(state_type& __state,$/;"	p	class:std::codecvt	access:protected	signature:(state_type& __state, const extern_type* __from, const extern_type* __from_end, const extern_type*& __from_next, intern_type* __to, intern_type* __to_end, intern_type*& __to_next) const
do_encoding	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      int do_encoding() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_always_noconv	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      bool do_always_noconv() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
do_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      int do_length(state_type&, const extern_type* __from,$/;"	p	class:std::codecvt	access:protected	signature:(state_type&, const extern_type* __from, const extern_type* __end, size_t __max) const
do_max_length	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      do_max_length() const throw();$/;"	p	class:std::codecvt	access:protected	signature:() const
codecvt_byname	/home/alan/.vim/tags/cpp_src/codecvt.h	/^    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>$/;"	c	namespace:std	inherits:codecvt
codecvt_byname	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      codecvt_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::codecvt_byname	access:public	signature:(const char* __s, size_t __refs = 0)
~codecvt_byname	/home/alan/.vim/tags/cpp_src/codecvt.h	/^      ~codecvt_byname() { }$/;"	f	class:std::codecvt_byname	access:protected	signature:()
_LIST_H	/home/alan/.vim/tags/cpp_src/stl_list.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_list.h	/^namespace std {$/;"	n
_List_node_base	/home/alan/.vim/tags/cpp_src/stl_list.h	/^  struct _List_node_base$/;"	s	namespace:std
_M_next	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    _List_node_base* _M_next;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
_M_prev	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    _List_node_base* _M_prev;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
swap	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    swap(_List_node_base& __x, _List_node_base& __y);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base& __x, _List_node_base& __y)
transfer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    transfer(_List_node_base * const __first,$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __first, _List_node_base * const __last)
reverse	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    reverse();$/;"	p	struct:std::_List_node_base	access:public	signature:()
hook	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    hook(_List_node_base * const __position);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __position)
unhook	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    unhook();$/;"	p	struct:std::_List_node_base	access:public	signature:()
_List_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    struct _List_node : public _List_node_base$/;"	s	namespace:std	inherits:_List_node_base
_M_data	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _Tp _M_data;                \/\/\/< User's data.$/;"	m	struct:std::_List_node	access:public
_List_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    struct _List_iterator$/;"	s	namespace:std
_Self	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_iterator<_Tp>                _Self;$/;"	t	struct:std::_List_iterator	access:public
_Node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_node<_Tp>                    _Node;$/;"	t	struct:std::_List_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_iterator	access:public
iterator_category	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_iterator	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Tp*                               pointer;$/;"	t	struct:std::_List_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Tp&                               reference;$/;"	t	struct:std::_List_iterator	access:public
_List_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_iterator()$/;"	f	struct:std::_List_iterator	access:public	signature:()
_List_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_iterator(_List_node_base* __x)$/;"	f	struct:std::_List_iterator	access:public	signature:(_List_node_base* __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator ==	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
operator !=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
_M_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_node_base* _M_node;$/;"	m	struct:std::_List_iterator	access:public
_List_const_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    struct _List_const_iterator$/;"	s	namespace:std
_Self	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_const_iterator<_Tp>          _Self;$/;"	t	struct:std::_List_const_iterator	access:public
_Node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef const _List_node<_Tp>              _Node;$/;"	t	struct:std::_List_const_iterator	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_iterator<_Tp>                iterator;$/;"	t	struct:std::_List_const_iterator	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_const_iterator	access:public
iterator_category	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_const_iterator	access:public
value_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_const_iterator	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef const _Tp*                         pointer;$/;"	t	struct:std::_List_const_iterator	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef const _Tp&                         reference;$/;"	t	struct:std::_List_const_iterator	access:public
_List_const_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_const_iterator()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
_List_const_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_const_iterator(const _List_node_base* __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _List_node_base* __x)
_List_const_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_const_iterator(const iterator& __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const iterator& __x)
operator *	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
operator ->	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
operator ++	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
operator ++	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
operator --	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
operator --	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
operator ==	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
operator !=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
_M_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      const _List_node_base* _M_node;$/;"	m	struct:std::_List_const_iterator	access:public
operator ==	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator==(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator!=(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
_List_base	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    class _List_base$/;"	c	namespace:std
_Node_alloc_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        _Node_alloc_type;$/;"	t	class:std::_List_base	access:protected
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	class:std::_List_base	access:protected
_List_impl	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      struct _List_impl $/;"	s	class:std::_List_base	inherits:_Node_alloc_type	access:protected
_M_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^	_List_node_base _M_node;$/;"	m	struct:std::_List_base::_List_impl	access:public
_List_impl	/home/alan/.vim/tags/cpp_src/stl_list.h	/^	_List_impl(const _Node_alloc_type& __a)$/;"	f	struct:std::_List_base::_List_impl	access:public	signature:(const _Node_alloc_type& __a)
_M_impl	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_impl _M_impl;$/;"	m	class:std::_List_base	access:protected
_M_get_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_get_node()$/;"	f	class:std::_List_base	access:protected	signature:()
_M_put_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:std::_List_base	access:protected	signature:(_List_node<_Tp>* __p)
allocator_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_List_base	access:public
_M_get_Node_allocator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_List_base	access:public	signature:()
_M_get_Node_allocator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
_M_get_Tp_allocator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      get_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
_List_base	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _List_base(const allocator_type& __a)$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type& __a)
~_List_base	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      ~_List_base()$/;"	f	class:std::_List_base	access:public	signature:()
_M_clear	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_clear();$/;"	p	class:std::_List_base	access:public	signature:()
_M_init	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_init()$/;"	f	class:std::_List_base	access:public	signature:()
list	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    class list : protected _List_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_List_base
_Alloc_value_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::list	access:private
_Base	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_base<_Tp, _Alloc>                    _Base;$/;"	t	class:std::list	access:private
_Tp_alloc_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::list	access:private
value_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::list	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::list	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::list	access:public
reference	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::list	access:public
const_reference	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::list	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_iterator<_Tp>                        iterator;$/;"	t	class:std::list	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_const_iterator<_Tp>                  const_iterator;$/;"	t	class:std::list	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::list	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::list	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef size_t                                     size_type;$/;"	t	class:std::list	access:public
difference_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef ptrdiff_t                                  difference_type;$/;"	t	class:std::list	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _Alloc                                     allocator_type;$/;"	t	class:std::list	access:public
_Node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      typedef _List_node<_Tp>				 _Node;$/;"	t	class:std::list	access:protected
_M_create_node	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(const value_type& __x)
list	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      list(const allocator_type& __a = allocator_type())$/;"	f	class:std::list	access:public	signature:(const allocator_type& __a = allocator_type())
list	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      list(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
list	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      list(const list& __x)$/;"	f	class:std::list	access:public	signature:(const list& __x)
list	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        list(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
operator =	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      operator=(const list& __x);$/;"	p	class:std::list	access:public	signature:(const list& __x)
assign	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __val)
assign	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last)
get_allocator	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      get_allocator() const$/;"	f	class:std::list	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      begin()$/;"	f	class:std::list	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      begin() const$/;"	f	class:std::list	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      end()$/;"	f	class:std::list	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      end() const$/;"	f	class:std::list	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      rbegin()$/;"	f	class:std::list	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      rbegin() const$/;"	f	class:std::list	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      rend()$/;"	f	class:std::list	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      rend() const$/;"	f	class:std::list	access:public	signature:() const
empty	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      empty() const$/;"	f	class:std::list	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      size() const$/;"	f	class:std::list	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      max_size() const$/;"	f	class:std::list	access:public	signature:() const
resize	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      resize(size_type __new_size, value_type __x = value_type());$/;"	p	class:std::list	access:public	signature:(size_type __new_size, value_type __x = value_type())
front	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      front()$/;"	f	class:std::list	access:public	signature:()
front	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      front() const$/;"	f	class:std::list	access:public	signature:() const
back	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      back()$/;"	f	class:std::list	access:public	signature:()
back	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      back() const$/;"	f	class:std::list	access:public	signature:() const
push_front	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      push_front(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
pop_front	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      pop_front()$/;"	f	class:std::list	access:public	signature:()
push_back	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      push_back(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
pop_back	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      pop_back()$/;"	f	class:std::list	access:public	signature:()
insert	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::list	access:public	signature:(iterator __position, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::list	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
erase	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      erase(iterator __position);$/;"	p	class:std::list	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __first, iterator __last)
swap	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      swap(list& __x)$/;"	f	class:std::list	access:public	signature:(list& __x)
clear	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      clear()$/;"	f	class:std::list	access:public	signature:()
splice	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      splice(iterator __position, list& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x)
splice	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      splice(iterator __position, list& __x, iterator __i)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __i)
splice	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      splice(iterator __position, list& __x, iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __first, iterator __last)
remove	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      remove(const _Tp& __value);$/;"	p	class:std::list	access:public	signature:(const _Tp& __value)
remove_if	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        remove_if(_Predicate);$/;"	p	class:std::list	access:public	signature:(_Predicate)
unique	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      unique();$/;"	p	class:std::list	access:public	signature:()
unique	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        unique(_BinaryPredicate);$/;"	p	class:std::list	access:public	signature:(_BinaryPredicate)
merge	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      merge(list& __x);$/;"	p	class:std::list	access:public	signature:(list& __x)
merge	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        merge(list&, _StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(list&, _StrictWeakOrdering)
reverse	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      reverse()$/;"	f	class:std::list	access:public	signature:()
sort	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      sort();$/;"	p	class:std::list	access:public	signature:()
sort	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        sort(_StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(_StrictWeakOrdering)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_fill_initialize	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_fill_initialize(size_type __n, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(size_type __n, const value_type& __x)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/home/alan/.vim/tags/cpp_src/stl_list.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_fill_assign	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::list	access:protected	signature:(size_type __n, const value_type& __val)
_M_transfer	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_transfer(iterator __position, iterator __first, iterator __last)$/;"	f	class:std::list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
_M_insert	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_insert(iterator __position, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(iterator __position, const value_type& __x)
_M_erase	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_erase(iterator __position)$/;"	f	class:std::list	access:protected	signature:(iterator __position)
_M_check_equal_allocators	/home/alan/.vim/tags/cpp_src/stl_list.h	/^      _M_check_equal_allocators(list& __x)$/;"	f	class:std::list	access:protected	signature:(list& __x)
operator ==	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator <	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator !=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator >	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator <=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator >=	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
swap	/home/alan/.vim/tags/cpp_src/stl_list.h	/^    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
_TEMPBUF_H	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	63;"	d
std	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^namespace std {$/;"	n
_Temporary_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^    class _Temporary_buffer$/;"	c	namespace:std
value_type	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	t	class:std::_Temporary_buffer	access:public
pointer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Temporary_buffer	access:public
iterator	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	t	class:std::_Temporary_buffer	access:public
size_type	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	t	class:std::_Temporary_buffer	access:public
_M_original_len	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_len	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      size_type  _M_len;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      pointer    _M_buffer;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_initialize_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp&, __true_type) { }$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp&, __true_type)
_M_initialize_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp& __val, __false_type)$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp& __val, __false_type)
size	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
requested_size	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      requested_size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
begin	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      begin()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      end()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
_Temporary_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
~_Temporary_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
_Temporary_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
operator =	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer	/home/alan/.vim/tags/cpp_src/stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	class:std::_Temporary_buffer	signature:(_ForwardIterator __first, _ForwardIterator __last)
_BASIC_STRING_H	/home/alan/.vim/tags/cpp_src/basic_string.h	42;"	d
std	/home/alan/.vim/tags/cpp_src/basic_string.h	/^namespace std {$/;"	n
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    class basic_string$/;"	c	namespace:std
_CharT_alloc_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;$/;"	t	class:std::basic_string	access:private
traits_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef _Traits					    traits_type;$/;"	t	class:std::basic_string	access:public
value_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _Traits::char_type		    value_type;$/;"	t	class:std::basic_string	access:public
allocator_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef _Alloc					    allocator_type;$/;"	t	class:std::basic_string	access:public
size_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::size_type	    size_type;$/;"	t	class:std::basic_string	access:public
difference_type	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::difference_type   difference_type;$/;"	t	class:std::basic_string	access:public
reference	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::reference	    reference;$/;"	t	class:std::basic_string	access:public
const_reference	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::const_reference   const_reference;$/;"	t	class:std::basic_string	access:public
pointer	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::pointer	    pointer;$/;"	t	class:std::basic_string	access:public
const_pointer	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef typename _CharT_alloc_type::const_pointer	    const_pointer;$/;"	t	class:std::basic_string	access:public
iterator	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	access:public
const_iterator	/home/alan/.vim/tags/cpp_src/basic_string.h	/^                                                            const_iterator;$/;"	t	class:std::basic_string	access:public
const_reverse_iterator	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	access:public
reverse_iterator	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      typedef std::reverse_iterator<iterator>		    reverse_iterator;$/;"	t	class:std::basic_string	access:public
_Rep_base	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      struct _Rep_base$/;"	s	class:std::basic_string	access:private
_M_length	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	size_type		_M_length;$/;"	m	struct:std::basic_string::_Rep_base	access:public
_M_capacity	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	size_type		_M_capacity;$/;"	m	struct:std::basic_string::_Rep_base	access:public
_M_refcount	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_Atomic_word		_M_refcount;$/;"	m	struct:std::basic_string::_Rep_base	access:public
_Rep	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      struct _Rep : _Rep_base$/;"	s	class:std::basic_string	inherits:_Rep_base	access:private
_Raw_bytes_alloc	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;$/;"	t	struct:std::basic_string::_Rep	access:public
_S_max_size	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	static const size_type	_S_max_size;$/;"	m	struct:std::basic_string::_Rep	access:public
_S_terminal	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	static const _CharT	_S_terminal;$/;"	m	struct:std::basic_string::_Rep	access:public
_S_empty_rep_storage	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        static size_type _S_empty_rep_storage[];$/;"	m	struct:std::basic_string::_Rep	access:public
_S_empty_rep	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_empty_rep()$/;"	f	struct:std::basic_string::_Rep	access:public	signature:()
_M_is_leaked	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_is_leaked() const$/;"	f	struct:std::basic_string::_Rep	access:public	signature:() const
_M_is_shared	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_is_shared() const$/;"	f	struct:std::basic_string::_Rep	access:public	signature:() const
_M_set_leaked	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_set_leaked()$/;"	f	struct:std::basic_string::_Rep	access:public	signature:()
_M_set_sharable	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_set_sharable()$/;"	f	struct:std::basic_string::_Rep	access:public	signature:()
_M_set_length_and_sharable	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_set_length_and_sharable(size_type __n)$/;"	f	struct:std::basic_string::_Rep	access:public	signature:(size_type __n)
_M_refdata	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_refdata() throw()$/;"	f	struct:std::basic_string::_Rep	access:public	signature:()
_M_grab	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	f	struct:std::basic_string::_Rep	access:public	signature:(const _Alloc& __alloc1, const _Alloc& __alloc2)
_S_create	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_S_create(size_type, size_type, const _Alloc&);$/;"	p	struct:std::basic_string::_Rep	access:public	signature:(size_type, size_type, const _Alloc&)
_M_dispose	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_dispose(const _Alloc& __a)$/;"	f	struct:std::basic_string::_Rep	access:public	signature:(const _Alloc& __a)
_M_destroy	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_destroy(const _Alloc&) throw();$/;"	p	struct:std::basic_string::_Rep	access:public	signature:(const _Alloc&)
_M_refcopy	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_refcopy() throw()$/;"	f	struct:std::basic_string::_Rep	access:public	signature:()
_M_clone	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_clone(const _Alloc&, size_type __res = 0);$/;"	p	struct:std::basic_string::_Rep	access:public	signature:(const _Alloc&, size_type __res = 0)
_Alloc_hider	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      struct _Alloc_hider : _Alloc$/;"	s	class:std::basic_string	inherits:_Alloc	access:private
_Alloc_hider	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_Alloc_hider(_CharT* __dat, const _Alloc& __a)$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(_CharT* __dat, const _Alloc& __a)
_M_p	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_CharT* _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	access:public
npos	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	access:public
_M_dataplus	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      mutable _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	access:private
_M_data	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_data() const$/;"	f	class:std::basic_string	access:private	signature:() const
_M_data	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_data(_CharT* __p)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p)
_M_rep	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_rep() const$/;"	f	class:std::basic_string	access:private	signature:() const
_M_ibegin	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_ibegin() const$/;"	f	class:std::basic_string	access:private	signature:() const
_M_iend	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_iend() const$/;"	f	class:std::basic_string	access:private	signature:() const
_M_leak	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_leak()    \/\/ for use in begin() & non-const op[]$/;"	f	class:std::basic_string	access:private	signature:()
_M_check	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	access:private	signature:(size_type __pos, const char* __s) const
_M_check_length	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	access:private	signature:(size_type __n1, size_type __n2, const char* __s) const
_M_limit	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const$/;"	f	class:std::basic_string	access:private	signature:(size_type __pos, size_type __off) const
_M_disjunct	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_disjunct(const _CharT* __s) const$/;"	f	class:std::basic_string	access:private	signature:(const _CharT* __s) const
_M_copy	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __d, const _CharT* __s, size_type __n)
_M_move	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __d, const _CharT* __s, size_type __n)
_M_assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __d, size_type __n, _CharT __c)
_S_copy_chars	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p, _Iterator __k1, _Iterator __k2)
_S_copy_chars	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p, iterator __k1, iterator __k2)
_S_copy_chars	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p, const_iterator __k1, const_iterator __k2)
_S_copy_chars	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p, _CharT* __k1, _CharT* __k2)
_S_copy_chars	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	access:private	signature:(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
_M_mutate	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	p	class:std::basic_string	access:private	signature:(size_type __pos, size_type __len1, size_type __len2)
_M_leak_hard	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_leak_hard();$/;"	p	class:std::basic_string	access:private	signature:()
_S_empty_rep	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_empty_rep()$/;"	f	class:std::basic_string	access:private	signature:()
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string();$/;"	p	class:std::basic_string	access:public	signature:()
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const _Alloc& __a);$/;"	p	class:std::basic_string	access:public	signature:(const _Alloc& __a)
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const basic_string& __str);$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str)
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos, size_type __n = npos)
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos, size_type __n, const _Alloc& __a)
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __n, const _Alloc& __a = _Alloc())
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, const _Alloc& __a = _Alloc())
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());$/;"	p	class:std::basic_string	access:public	signature:(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	p	class:std::basic_string	access:public	signature:(_InputIterator __beg, _InputIterator __end, const _Alloc& __a = _Alloc())
~basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      ~basic_string()$/;"	f	class:std::basic_string	access:public	signature:()
operator =	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator=(const basic_string& __str) $/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str)
operator =	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator=(const _CharT* __s) $/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s)
operator =	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator=(_CharT __c) $/;"	f	class:std::basic_string	access:public	signature:(_CharT __c)
begin	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      begin()$/;"	f	class:std::basic_string	access:public	signature:()
begin	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      begin() const$/;"	f	class:std::basic_string	access:public	signature:() const
end	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      end()$/;"	f	class:std::basic_string	access:public	signature:()
end	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      end() const$/;"	f	class:std::basic_string	access:public	signature:() const
rbegin	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rbegin()$/;"	f	class:std::basic_string	access:public	signature:()
rbegin	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rbegin() const$/;"	f	class:std::basic_string	access:public	signature:() const
rend	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rend()$/;"	f	class:std::basic_string	access:public	signature:()
rend	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rend() const$/;"	f	class:std::basic_string	access:public	signature:() const
size	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      size() const$/;"	f	class:std::basic_string	access:public	signature:() const
length	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      length() const$/;"	f	class:std::basic_string	access:public	signature:() const
max_size	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      max_size() const$/;"	f	class:std::basic_string	access:public	signature:() const
resize	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	access:public	signature:(size_type __n, _CharT __c)
resize	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	access:public	signature:(size_type __n)
capacity	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      capacity() const$/;"	f	class:std::basic_string	access:public	signature:() const
reserve	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      reserve(size_type __res_arg = 0);$/;"	p	class:std::basic_string	access:public	signature:(size_type __res_arg = 0)
clear	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      clear()$/;"	f	class:std::basic_string	access:public	signature:()
empty	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      empty() const$/;"	f	class:std::basic_string	access:public	signature:() const
operator []	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator[] (size_type __pos) const$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos) const
operator []	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos)
at	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	access:public	signature:(size_type __n) const
at	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	access:public	signature:(size_type __n)
operator +=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str)
operator +=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s)
operator +=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(_CharT __c)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      append(const basic_string& __str);$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n);$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos, size_type __n)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __n)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      append(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	access:public	signature:(size_type __n, _CharT __c)
append	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __first, _InputIterator __last)
push_back	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(_CharT __c)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      assign(const basic_string& __str);$/;"	p	class:std::basic_string	access:public	signature:(const basic_string& __str)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos, size_type __n)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      assign(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __n)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(size_type __n, _CharT __c)
assign	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(iterator __p, size_type __n, _CharT __c)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	access:public	signature:(iterator __p, _InputIterator __beg, _InputIterator __end)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos1, const basic_string& __str)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos, const _CharT* __s, size_type __n)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos, const _CharT* __s)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n, _CharT __c)
insert	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      insert(iterator __p, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(iterator __p, _CharT __c)
erase	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos)
erase	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      erase(iterator __position)$/;"	f	class:std::basic_string	access:public	signature:(iterator __position)
erase	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::basic_string	access:public	signature:(iterator __first, iterator __last)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n, const basic_string& __str)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, const basic_string& __str)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, const _CharT* __s)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, size_type __n, _CharT __c)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, const _CharT* __k1, const _CharT* __k2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
replace	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	access:public	signature:(iterator __i1, iterator __i2, const_iterator __k1, const_iterator __k2)
_M_replace_dispatch	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	f	class:std::basic_string	access:private	signature:(iterator __i1, iterator __i2, _Integer __n, _Integer __val, __true_type)
_M_replace_dispatch	/home/alan/.vim/tags/cpp_src/basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	p	class:std::basic_string	access:private	signature:(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type)
_M_replace_aux	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	access:private	signature:(size_type __pos1, size_type __n1, size_type __n2, _CharT __c)
_M_replace_safe	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	access:private	signature:(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2)
_S_construct_aux	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	access:private	signature:(_InIterator __beg, _InIterator __end, const _Alloc& __a, __false_type)
_S_construct_aux	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	access:private	signature:(_InIterator __beg, _InIterator __end, const _Alloc& __a, __true_type)
_S_construct	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string	access:private	signature:(_InIterator __beg, _InIterator __end, const _Alloc& __a)
_S_construct	/home/alan/.vim/tags/cpp_src/basic_string.h	/^         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	access:private	signature:(_InIterator __beg, _InIterator __end, const _Alloc& __a, input_iterator_tag)
_S_construct	/home/alan/.vim/tags/cpp_src/basic_string.h	/^        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	access:private	signature:(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a, forward_iterator_tag)
_S_construct	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	p	class:std::basic_string	access:private	signature:(size_type __req, _CharT __c, const _Alloc& __a)
copy	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	access:public	signature:(_CharT* __s, size_type __n, size_type __pos = 0) const
swap	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      swap(basic_string& __s);$/;"	p	class:std::basic_string	access:public	signature:(basic_string& __s)
c_str	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      c_str() const$/;"	f	class:std::basic_string	access:public	signature:() const
data	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      data() const$/;"	f	class:std::basic_string	access:public	signature:() const
get_allocator	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      get_allocator() const$/;"	f	class:std::basic_string	access:public	signature:() const
find	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = 0) const
find	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = 0) const
rfind	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = npos) const
rfind	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
rfind	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
rfind	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const;$/;"	p	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = npos) const
find_first_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = 0) const
find_first_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find_first_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = 0) const
find_last_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = npos) const
find_last_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
find_last_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = npos) const
find_first_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = 0) const
find_first_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find_first_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const;$/;"	p	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = 0) const
find_last_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str, size_type __pos = npos) const
find_last_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
find_last_not_of	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const;$/;"	p	class:std::basic_string	access:public	signature:(_CharT __c, size_type __pos = npos) const
substr	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	access:public	signature:(const basic_string& __str) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n, const basic_string& __str) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(const _CharT* __s) const;$/;"	p	class:std::basic_string	access:public	signature:(const _CharT* __s) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s) const
compare	/home/alan/.vim/tags/cpp_src/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2) const
basic_string	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    basic_string()$/;"	f	class:std::basic_string	signature:()
operator +	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator +	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	p	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)
operator +	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	p	namespace:std	signature:(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)
operator +	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator +	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
operator ==	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator ==	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator ==	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator !=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator <	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator <	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator <	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator >	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator >	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator >	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator <=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator <=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator <=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator >=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator >=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
operator >=	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std	signature:(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
swap	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	signature:(basic_string<_CharT, _Traits, _Alloc>& __lhs, basic_string<_CharT, _Traits, _Alloc>& __rhs)
operator >>	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	signature:(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Alloc>& __str)
operator >>	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	signature:(basic_istream<char>& __is, basic_string<char>& __str)
operator <<	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Alloc>& __str)
getline	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	signature:(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
getline	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std	signature:(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Alloc>& __str)
getline	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	signature:(basic_istream<char>& __in, basic_string<char>& __str, char __delim)
getline	/home/alan/.vim/tags/cpp_src/basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	signature:(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str, wchar_t __delim)
